{
"repo": "Harium/keel", 
"path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", 
"func_name": "Distance.SymmetricKullbackLeibler", 
"original_string": "public static double SymmetricKullbackLeibler(double[] p, double[] q) {\n        double dist = 0;\n        for (int i = 0; i < p.length; i++) {\n            dist += (p[i] - q[i]) * (Math.log(p[i]) - Math.log(q[i]));\n        }\n\n        return dist;\n    }", 
"language": "java", 
"code": "public static double SymmetricKullbackLeibler(double[] p, double[] q) {\n        double dist = 0;\n        for (int i = 0; i < p.length; i++) {\n            dist += (p[i] - q[i]) * (Math.log(p[i]) - Math.log(q[i]));\n        }\n\n        return dist;\n    }", 
"code_tokens": ["public", "static", "double", "SymmetricKullbackLeibler", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "dist", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "dist", "+=", "(", "p", "[", "i", "]", "-", "q", "[", "i", "]", ")", "*", "(", "Math", ".", "log", "(", "p", "[", "i", "]", ")", "-", "Math", ".", "log", "(", "q", "[", "i", "]", ")", ")", ";", "}", "return", "dist", ";", "}"], 
"docstring": "Gets the Symmetric Kullback-Leibler distance.\nThis metric is valid only for real and positive P and Q.\n\n@param p P vector.\n@param q Q vector.\n@return The Symmetric Kullback Leibler distance between p and q.", 
"docstring_tokens": ["Gets", "the", "Symmetric", "Kullback", "-", "Leibler", "distance", ".", "This", "metric", "is", "valid", "only", "for", "real", "and", "positive", "P", "and", "Q", "."], 
"sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", 
"url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L873-L880", 
"partition": "train"
}

{
"repo": "Harium/keel", 
"path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", 
"func_name": "Distance.SymmetricKullbackLeibler", 
"original_string": "public static double SymmetricKullbackLeibler(double[] p, double[] q) {\n        double dist = 0;\n        for (int i = 0; i < p.length; i++) {\n            dist += (p[i] - q[i]) * (Math.log(p[i]) - Math.log(q[i]));\n        }\n\n        return dist;\n    }", 
"language": "java", 
"code": "public static double SymmetricKullbackLeibler(double[] p, double[] q) {\n        double dist = 0;\n        for (int i = 0; i < p.length; i++) {\n            dist += (p[i] - q[i]) * (Math.log(p[i]) - Math.log(q[i]));\n        }\n\n        return dist;\n    }", 
"code_tokens": ["public", "static", "double", "SymmetricKullbackLeibler", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "dist", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "dist", "+=", "(", "p", "[", "i", "]", "-", "q", "[", "i", "]", ")", "*", "(", "Math", ".", "log", "(", "p", "[", "i", "]", ")", "-", "Math", ".", "log", "(", "q", "[", "i", "]", ")", ")", ";", "}", "return", "dist", ";", "}"], 
"docstring": "Gets the Symmetric Kullback - Leibler distance . This metric is valid only for real and positive P and Q .", 
"docstring_tokens": ["Gets", "the", "Symmetric", "Kullback", "-", "Leibler", "distance", ".", "This", "metric", "is", "valid", "only", "for", "real", "and", "positive", "P", "and", "Q", "."], 
"sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", 
"url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L873-L880", 
"partition": "train", 
"similar_code": [
    "public static double TopsoeDivergence ( double [ ] p , double [ ] q ) { double r = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { if ( p [ i ] != 0 && q [ i ] != 0 ) { double den = p [ i ] + q [ i ] ; r += p [ i ] * Math . log ( 2 * p [ i ] / den ) + q [ i ] * Math . log ( 2 * q [ i ] / den ) ; } } return r ; }", 
    "public static double Taneja ( double [ ] p , double [ ] q ) { double r = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { if ( p [ i ] != 0 && q [ i ] != 0 ) { double pq = p [ i ] + q [ i ] ; r += ( pq / 2 ) * Math . log ( pq / ( 2 * Math . sqrt ( p [ i ] * q [ i ] ) ) ) ; } } return r ; }", 
    "public static double KullbackLeiblerDivergence ( double [ ] p , double [ ] q ) { boolean intersection = false ; double k = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { if ( p [ i ] != 0 && q [ i ] != 0 ) { intersection = true ; k += p [ i ] * Math . log ( p [ i ] / q [ i ] ) ; } } if ( intersection ) return k ; else return Double . POSITIVE_INFINITY ; }", 
    "public static double KumarJohnsonDivergence ( double [ ] p , double [ ] q ) { double r = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { if ( p [ i ] != 0 && q [ i ] != 0 ) { r += Math . pow ( p [ i ] * p [ i ] - q [ i ] * q [ i ] , 2 ) / 2 * Math . pow ( p [ i ] * q [ i ] , 1.5 ) ; } } return r ; }", 
    "public static double Correlation ( double [ ] p , double [ ] q ) { double x = 0 ; double y = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { x += - p [ i ] ; y += - q [ i ] ; } x /= p . length ; y /= q . length ; double num = 0 ; double den1 = 0 ; double den2 = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { num += ( p [ i ] + x ) * ( q [ i ] + y ) ; den1 += Math . abs ( Math . pow ( p [ i ] + x , 2 ) ) ; den2 += Math . abs ( Math . pow ( q [ i ] + x , 2 ) ) ; } return 1 - ( num / ( Math . sqrt ( den1 ) * Math . sqrt ( den2 ) ) ) ; }"
    ], 
"similar_code_tokens": [
    ["public", "static", "double", "TopsoeDivergence", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "r", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "if", "(", "p", "[", "i", "]", "!=", "0", "&&", "q", "[", "i", "]", "!=", "0", ")", "{", "double", "den", "=", "p", "[", "i", "]", "+", "q", "[", "i", "]", ";", "r", "+=", "p", "[", "i", "]", "*", "Math", ".", "log", "(", "2", "*", "p", "[", "i", "]", "/", "den", ")", "+", "q", "[", "i", "]", "*", "Math", ".", "log", "(", "2", "*", "q", "[", "i", "]", "/", "den", ")", ";", "}", "}", "return", "r", ";", "}"], 
    ["public", "static", "double", "Taneja", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "r", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "if", "(", "p", "[", "i", "]", "!=", "0", "&&", "q", "[", "i", "]", "!=", "0", ")", "{", "double", "pq", "=", "p", "[", "i", "]", "+", "q", "[", "i", "]", ";", "r", "+=", "(", "pq", "/", "2", ")", "*", "Math", ".", "log", "(", "pq", "/", "(", "2", "*", "Math", ".", "sqrt", "(", "p", "[", "i", "]", "*", "q", "[", "i", "]", ")", ")", ")", ";", "}", "}", "return", "r", ";", "}"], 
    ["public", "static", "double", "KullbackLeiblerDivergence", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "boolean", "intersection", "=", "false", ";", "double", "k", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "if", "(", "p", "[", "i", "]", "!=", "0", "&&", "q", "[", "i", "]", "!=", "0", ")", "{", "intersection", "=", "true", ";", "k", "+=", "p", "[", "i", "]", "*", "Math", ".", "log", "(", "p", "[", "i", "]", "/", "q", "[", "i", "]", ")", ";", "}", "}", "if", "(", "intersection", ")", "return", "k", ";", "else", "return", "Double", ".", "POSITIVE_INFINITY", ";", "}"], 
    ["public", "static", "double", "KumarJohnsonDivergence", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "r", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "if", "(", "p", "[", "i", "]", "!=", "0", "&&", "q", "[", "i", "]", "!=", "0", ")", "{", "r", "+=", "Math", ".", "pow", "(", "p", "[", "i", "]", "*", "p", "[", "i", "]", "-", "q", "[", "i", "]", "*", "q", "[", "i", "]", ",", "2", ")", "/", "2", "*", "Math", ".", "pow", "(", "p", "[", "i", "]", "*", "q", "[", "i", "]", ",", "1.5", ")", ";", "}", "}", "return", "r", ";", "}"], 
    ["public", "static", "double", "Correlation", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "x", "=", "0", ";", "double", "y", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "x", "+=", "-", "p", "[", "i", "]", ";", "y", "+=", "-", "q", "[", "i", "]", ";", "}", "x", "/=", "p", ".", "length", ";", "y", "/=", "q", ".", "length", ";", "double", "num", "=", "0", ";", "double", "den1", "=", "0", ";", "double", "den2", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "num", "+=", "(", "p", "[", "i", "]", "+", "x", ")", "*", "(", "q", "[", "i", "]", "+", "y", ")", ";", "den1", "+=", "Math", ".", "abs", "(", "Math", ".", "pow", "(", "p", "[", "i", "]", "+", "x", ",", "2", ")", ")", ";", "den2", "+=", "Math", ".", "abs", "(", "Math", ".", "pow", "(", "q", "[", "i", "]", "+", "x", ",", "2", ")", ")", ";", "}", "return", "1", "-", "(", "num", "/", "(", "Math", ".", "sqrt", "(", "den1", ")", "*", "Math", ".", "sqrt", "(", "den2", ")", ")", ")", ";", "}"]
    ], 
"similar_docstring": ["Gets the Topsoe divergence .", "Gets the Taneja divergence .", "Gets the Kullback Leibler divergence .", "Gets the Kumar - Johnson divergence .", "Gets the Correlation distance between two points ."], 
"similar_docstring_tokens": []
}