{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/effect/height/Sobel.java", "func_name": "Sobel.apply", "original_string": "@Override\n    public ImageSource apply(ImageSource input) {\n        final int[][] pixelMatrix = new int[3][3];\n\n        int w = input.getWidth();\n        int h = input.getHeight();\n\n        int[][] output = new int[h][w];\n\n        for (int j = 1; j < h - 1; j++) {\n            for (int i = 1; i < w - 1; i++) {\n                pixelMatrix[0][0] = input.getR(i - 1, j - 1);\n                pixelMatrix[0][1] = input.getRGB(i - 1, j);\n                pixelMatrix[0][2] = input.getRGB(i - 1, j + 1);\n                pixelMatrix[1][0] = input.getRGB(i, j - 1);\n                pixelMatrix[1][2] = input.getRGB(i, j + 1);\n                pixelMatrix[2][0] = input.getRGB(i + 1, j - 1);\n                pixelMatrix[2][1] = input.getRGB(i + 1, j);\n                pixelMatrix[2][2] = input.getRGB(i + 1, j + 1);\n\n                int edge = (int) convolution(pixelMatrix);\n                int rgb = (edge << 16 | edge << 8 | edge);\n                output[j][i] = rgb;\n            }\n        }\n\n        MatrixSource source = new MatrixSource(output);\n        return source;\n    }", "language": "java", "code": "@Override\n    public ImageSource apply(ImageSource input) {\n        final int[][] pixelMatrix = new int[3][3];\n\n        int w = input.getWidth();\n        int h = input.getHeight();\n\n        int[][] output = new int[h][w];\n\n        for (int j = 1; j < h - 1; j++) {\n            for (int i = 1; i < w - 1; i++) {\n                pixelMatrix[0][0] = input.getR(i - 1, j - 1);\n                pixelMatrix[0][1] = input.getRGB(i - 1, j);\n                pixelMatrix[0][2] = input.getRGB(i - 1, j + 1);\n                pixelMatrix[1][0] = input.getRGB(i, j - 1);\n                pixelMatrix[1][2] = input.getRGB(i, j + 1);\n                pixelMatrix[2][0] = input.getRGB(i + 1, j - 1);\n                pixelMatrix[2][1] = input.getRGB(i + 1, j);\n                pixelMatrix[2][2] = input.getRGB(i + 1, j + 1);\n\n                int edge = (int) convolution(pixelMatrix);\n                int rgb = (edge << 16 | edge << 8 | edge);\n                output[j][i] = rgb;\n            }\n        }\n\n        MatrixSource source = new MatrixSource(output);\n        return source;\n    }", "code_tokens": ["@", "Override", "public", "ImageSource", "apply", "(", "ImageSource", "input", ")", "{", "final", "int", "[", "]", "[", "]", "pixelMatrix", "=", "new", "int", "[", "3", "]", "[", "3", "]", ";", "int", "w", "=", "input", ".", "getWidth", "(", ")", ";", "int", "h", "=", "input", ".", "getHeight", "(", ")", ";", "int", "[", "]", "[", "]", "output", "=", "new", "int", "[", "h", "]", "[", "w", "]", ";", "for", "(", "int", "j", "=", "1", ";", "j", "<", "h", "-", "1", ";", "j", "++", ")", "{", "for", "(", "int", "i", "=", "1", ";", "i", "<", "w", "-", "1", ";", "i", "++", ")", "{", "pixelMatrix", "[", "0", "]", "[", "0", "]", "=", "input", ".", "getR", "(", "i", "-", "1", ",", "j", "-", "1", ")", ";", "pixelMatrix", "[", "0", "]", "[", "1", "]", "=", "input", ".", "getRGB", "(", "i", "-", "1", ",", "j", ")", ";", "pixelMatrix", "[", "0", "]", "[", "2", "]", "=", "input", ".", "getRGB", "(", "i", "-", "1", ",", "j", "+", "1", ")", ";", "pixelMatrix", "[", "1", "]", "[", "0", "]", "=", "input", ".", "getRGB", "(", "i", ",", "j", "-", "1", ")", ";", "pixelMatrix", "[", "1", "]", "[", "2", "]", "=", "input", ".", "getRGB", "(", "i", ",", "j", "+", "1", ")", ";", "pixelMatrix", "[", "2", "]", "[", "0", "]", "=", "input", ".", "getRGB", "(", "i", "+", "1", ",", "j", "-", "1", ")", ";", "pixelMatrix", "[", "2", "]", "[", "1", "]", "=", "input", ".", "getRGB", "(", "i", "+", "1", ",", "j", ")", ";", "pixelMatrix", "[", "2", "]", "[", "2", "]", "=", "input", ".", "getRGB", "(", "i", "+", "1", ",", "j", "+", "1", ")", ";", "int", "edge", "=", "(", "int", ")", "convolution", "(", "pixelMatrix", ")", ";", "int", "rgb", "=", "(", "edge", "<<", "16", "|", "edge", "<<", "8", "|", "edge", ")", ";", "output", "[", "j", "]", "[", "i", "]", "=", "rgb", ";", "}", "}", "MatrixSource", "source", "=", "new", "MatrixSource", "(", "output", ")", ";", "return", "source", ";", "}"], "docstring": "Expects a height mat as input\n\n@param input - A grayscale height map\n@return edges", "docstring_tokens": ["Expects", "a", "height", "mat", "as", "input"], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/effect/height/Sobel.java#L19-L47", "partition": "train"}
{"repo": "skuzzle/jeve", "path": "jeve/src/main/java/de/skuzzle/jeve/providers/EventStackImpl.java", "func_name": "EventStackImpl.popEvent", "original_string": "public <L extends Listener> void popEvent(Event<?, L> expected) {\n        synchronized (this.stack) {\n            final Event<?, ?> actual = this.stack.pop();\n            if (actual != expected) {\n                throw new IllegalStateException(String.format(\n                        \"Unbalanced pop: expected '%s' but encountered '%s'\",\n                        expected.getListenerClass(), actual));\n            }\n        }\n    }", "language": "java", "code": "public <L extends Listener> void popEvent(Event<?, L> expected) {\n        synchronized (this.stack) {\n            final Event<?, ?> actual = this.stack.pop();\n            if (actual != expected) {\n                throw new IllegalStateException(String.format(\n                        \"Unbalanced pop: expected '%s' but encountered '%s'\",\n                        expected.getListenerClass(), actual));\n            }\n        }\n    }", "code_tokens": ["public", "<", "L", "extends", "Listener", ">", "void", "popEvent", "(", "Event", "<", "?", ",", "L", ">", "expected", ")", "{", "synchronized", "(", "this", ".", "stack", ")", "{", "final", "Event", "<", "?", ",", "?", ">", "actual", "=", "this", ".", "stack", ".", "pop", "(", ")", ";", "if", "(", "actual", "!=", "expected", ")", "{", "throw", "new", "IllegalStateException", "(", "String", ".", "format", "(", "\"Unbalanced pop: expected '%s' but encountered '%s'\"", ",", "expected", ".", "getListenerClass", "(", ")", ",", "actual", ")", ")", ";", "}", "}", "}"], "docstring": "Pops the top event off the current event stack. This action has to be\nperformed immediately after the event has been dispatched to all\nlisteners.\n\n@param <L> Type of the listener.\n@param expected The Event which is expected at the top of the stack.\n@see #pushEvent(Event)", "docstring_tokens": ["Pops", "the", "top", "event", "off", "the", "current", "event", "stack", ".", "This", "action", "has", "to", "be", "performed", "immediately", "after", "the", "event", "has", "been", "dispatched", "to", "all", "listeners", "."], "sha": "42cc18947c9c8596c34410336e4e375e9fcd7c47", "url": "https://github.com/skuzzle/jeve/blob/42cc18947c9c8596c34410336e4e375e9fcd7c47/jeve/src/main/java/de/skuzzle/jeve/providers/EventStackImpl.java#L114-L123", "partition": "train"}
{"repo": "skuzzle/jeve", "path": "jeve/src/main/java/de/skuzzle/jeve/stores/AbstractSynchronizedListenerSource.java", "func_name": "AbstractSynchronizedListenerSource.modify", "original_string": "protected void modify(Transaction t) {\n        try {\n            this.lock.writeLock().lock();\n            t.perform();\n        } finally {\n            this.lock.writeLock().unlock();\n        }\n    }", "language": "java", "code": "protected void modify(Transaction t) {\n        try {\n            this.lock.writeLock().lock();\n            t.perform();\n        } finally {\n            this.lock.writeLock().unlock();\n        }\n    }", "code_tokens": ["protected", "void", "modify", "(", "Transaction", "t", ")", "{", "try", "{", "this", ".", "lock", ".", "writeLock", "(", ")", ".", "lock", "(", ")", ";", "t", ".", "perform", "(", ")", ";", "}", "finally", "{", "this", ".", "lock", ".", "writeLock", "(", ")", ".", "unlock", "(", ")", ";", "}", "}"], "docstring": "Executes the given transaction within the context of a write lock.\n\n@param t The transaction to execute.", "docstring_tokens": ["Executes", "the", "given", "transaction", "within", "the", "context", "of", "a", "write", "lock", "."], "sha": "42cc18947c9c8596c34410336e4e375e9fcd7c47", "url": "https://github.com/skuzzle/jeve/blob/42cc18947c9c8596c34410336e4e375e9fcd7c47/jeve/src/main/java/de/skuzzle/jeve/stores/AbstractSynchronizedListenerSource.java#L48-L55", "partition": "train"}
{"repo": "skuzzle/jeve", "path": "jeve/src/main/java/de/skuzzle/jeve/stores/AbstractSynchronizedListenerSource.java", "func_name": "AbstractSynchronizedListenerSource.read", "original_string": "protected <E> E read(Supplier<E> sup) {\n        try {\n            this.lock.readLock().lock();\n            return sup.get();\n        } finally {\n            this.lock.readLock().unlock();\n        }\n    }", "language": "java", "code": "protected <E> E read(Supplier<E> sup) {\n        try {\n            this.lock.readLock().lock();\n            return sup.get();\n        } finally {\n            this.lock.readLock().unlock();\n        }\n    }", "code_tokens": ["protected", "<", "E", ">", "E", "read", "(", "Supplier", "<", "E", ">", "sup", ")", "{", "try", "{", "this", ".", "lock", ".", "readLock", "(", ")", ".", "lock", "(", ")", ";", "return", "sup", ".", "get", "(", ")", ";", "}", "finally", "{", "this", ".", "lock", ".", "readLock", "(", ")", ".", "unlock", "(", ")", ";", "}", "}"], "docstring": "Executes the given supplier within the context of a read lock.\n\n@param <E> The result type.\n@param sup The supplier.\n@return The result of {@link Supplier#get()}.", "docstring_tokens": ["Executes", "the", "given", "supplier", "within", "the", "context", "of", "a", "read", "lock", "."], "sha": "42cc18947c9c8596c34410336e4e375e9fcd7c47", "url": "https://github.com/skuzzle/jeve/blob/42cc18947c9c8596c34410336e4e375e9fcd7c47/jeve/src/main/java/de/skuzzle/jeve/stores/AbstractSynchronizedListenerSource.java#L64-L71", "partition": "train"}
{"repo": "vnesek/nmote-iim4j", "path": "src/main/java/com/nmote/iim4j/stream/SubIIMInputStream.java", "func_name": "SubIIMInputStream.setOffsetAndLength", "original_string": "protected void setOffsetAndLength(long offset, int length) throws IOException {\r\n\t\tthis.offset = offset;\r\n\t\tthis.length = length;\r\n\t\tthis.position = 0;\r\n\r\n\t\tif (subStream.position() != offset) {\r\n\t\t\tsubStream.seek(offset);\r\n\t\t}\r\n\t}", "language": "java", "code": "protected void setOffsetAndLength(long offset, int length) throws IOException {\r\n\t\tthis.offset = offset;\r\n\t\tthis.length = length;\r\n\t\tthis.position = 0;\r\n\r\n\t\tif (subStream.position() != offset) {\r\n\t\t\tsubStream.seek(offset);\r\n\t\t}\r\n\t}", "code_tokens": ["protected", "void", "setOffsetAndLength", "(", "long", "offset", ",", "int", "length", ")", "throws", "IOException", "{", "this", ".", "offset", "=", "offset", ";", "this", ".", "length", "=", "length", ";", "this", ".", "position", "=", "0", ";", "if", "(", "subStream", ".", "position", "(", ")", "!=", "offset", ")", "{", "subStream", ".", "seek", "(", "offset", ")", ";", "}", "}"], "docstring": "This should be called from a subclass constructor, if offset or length\nare unknown at a time when SubIIMInputStream constructor is called. This\nmethod shouldn't be called more than once.\n\n@param offset\nbyte offset\n@param length\nbyte length\n@throws IOException\nif underlying stream can't be read", "docstring_tokens": ["This", "should", "be", "called", "from", "a", "subclass", "constructor", "if", "offset", "or", "length", "are", "unknown", "at", "a", "time", "when", "SubIIMInputStream", "constructor", "is", "called", ".", "This", "method", "shouldn", "t", "be", "called", "more", "than", "once", "."], "sha": "ec55b02fc644cd722e93051ac0bdb96b00cb42a8", "url": "https://github.com/vnesek/nmote-iim4j/blob/ec55b02fc644cd722e93051ac0bdb96b00cb42a8/src/main/java/com/nmote/iim4j/stream/SubIIMInputStream.java#L64-L72", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/function/Bessel.java", "func_name": "Bessel.J0", "original_string": "public static double J0(double x) {\r\n        double ax;\r\n\r\n        if ((ax = Math.abs(x)) < 8.0) {\r\n            double y = x * x;\r\n            double ans1 = 57568490574.0 + y * (-13362590354.0 + y * (651619640.7\r\n                    + y * (-11214424.18 + y * (77392.33017 + y * (-184.9052456)))));\r\n            double ans2 = 57568490411.0 + y * (1029532985.0 + y * (9494680.718\r\n                    + y * (59272.64853 + y * (267.8532712 + y * 1.0))));\r\n\r\n            return ans1 / ans2;\r\n        } else {\r\n            double z = 8.0 / ax;\r\n            double y = z * z;\r\n            double xx = ax - 0.785398164;\r\n            double ans1 = 1.0 + y * (-0.1098628627e-2 + y * (0.2734510407e-4\r\n                    + y * (-0.2073370639e-5 + y * 0.2093887211e-6)));\r\n            double ans2 = -0.1562499995e-1 + y * (0.1430488765e-3\r\n                    + y * (-0.6911147651e-5 + y * (0.7621095161e-6\r\n                    - y * 0.934935152e-7)));\r\n\r\n            return Math.sqrt(0.636619772 / ax) *\r\n                    (Math.cos(xx) * ans1 - z * Math.sin(xx) * ans2);\r\n        }\r\n    }", "language": "java", "code": "public static double J0(double x) {\r\n        double ax;\r\n\r\n        if ((ax = Math.abs(x)) < 8.0) {\r\n            double y = x * x;\r\n            double ans1 = 57568490574.0 + y * (-13362590354.0 + y * (651619640.7\r\n                    + y * (-11214424.18 + y * (77392.33017 + y * (-184.9052456)))));\r\n            double ans2 = 57568490411.0 + y * (1029532985.0 + y * (9494680.718\r\n                    + y * (59272.64853 + y * (267.8532712 + y * 1.0))));\r\n\r\n            return ans1 / ans2;\r\n        } else {\r\n            double z = 8.0 / ax;\r\n            double y = z * z;\r\n            double xx = ax - 0.785398164;\r\n            double ans1 = 1.0 + y * (-0.1098628627e-2 + y * (0.2734510407e-4\r\n                    + y * (-0.2073370639e-5 + y * 0.2093887211e-6)));\r\n            double ans2 = -0.1562499995e-1 + y * (0.1430488765e-3\r\n                    + y * (-0.6911147651e-5 + y * (0.7621095161e-6\r\n                    - y * 0.934935152e-7)));\r\n\r\n            return Math.sqrt(0.636619772 / ax) *\r\n                    (Math.cos(xx) * ans1 - z * Math.sin(xx) * ans2);\r\n        }\r\n    }", "code_tokens": ["public", "static", "double", "J0", "(", "double", "x", ")", "{", "double", "ax", ";", "if", "(", "(", "ax", "=", "Math", ".", "abs", "(", "x", ")", ")", "<", "8.0", ")", "{", "double", "y", "=", "x", "*", "x", ";", "double", "ans1", "=", "57568490574.0", "+", "y", "*", "(", "-", "13362590354.0", "+", "y", "*", "(", "651619640.7", "+", "y", "*", "(", "-", "11214424.18", "+", "y", "*", "(", "77392.33017", "+", "y", "*", "(", "-", "184.9052456", ")", ")", ")", ")", ")", ";", "double", "ans2", "=", "57568490411.0", "+", "y", "*", "(", "1029532985.0", "+", "y", "*", "(", "9494680.718", "+", "y", "*", "(", "59272.64853", "+", "y", "*", "(", "267.8532712", "+", "y", "*", "1.0", ")", ")", ")", ")", ";", "return", "ans1", "/", "ans2", ";", "}", "else", "{", "double", "z", "=", "8.0", "/", "ax", ";", "double", "y", "=", "z", "*", "z", ";", "double", "xx", "=", "ax", "-", "0.785398164", ";", "double", "ans1", "=", "1.0", "+", "y", "*", "(", "-", "0.1098628627e-2", "+", "y", "*", "(", "0.2734510407e-4", "+", "y", "*", "(", "-", "0.2073370639e-5", "+", "y", "*", "0.2093887211e-6", ")", ")", ")", ";", "double", "ans2", "=", "-", "0.1562499995e-1", "+", "y", "*", "(", "0.1430488765e-3", "+", "y", "*", "(", "-", "0.6911147651e-5", "+", "y", "*", "(", "0.7621095161e-6", "-", "y", "*", "0.934935152e-7", ")", ")", ")", ";", "return", "Math", ".", "sqrt", "(", "0.636619772", "/", "ax", ")", "*", "(", "Math", ".", "cos", "(", "xx", ")", "*", "ans1", "-", "z", "*", "Math", ".", "sin", "(", "xx", ")", "*", "ans2", ")", ";", "}", "}"], "docstring": "Bessel function of order 0.\n\n@param x Value.\n@return J0 value.", "docstring_tokens": ["Bessel", "function", "of", "order", "0", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/function/Bessel.java#L66-L90", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/function/Bessel.java", "func_name": "Bessel.J", "original_string": "public static double J(int n, double x) {\r\n        int j, m;\r\n        double ax, bj, bjm, bjp, sum, tox, ans;\r\n        boolean jsum;\r\n\r\n        double ACC = 40.0;\r\n        double BIGNO = 1.0e+10;\r\n        double BIGNI = 1.0e-10;\r\n\r\n        if (n == 0) return J0(x);\r\n        if (n == 1) return J(x);\r\n\r\n        ax = Math.abs(x);\r\n        if (ax == 0.0) return 0.0;\r\n        else if (ax > (double) n) {\r\n            tox = 2.0 / ax;\r\n            bjm = J0(ax);\r\n            bj = J(ax);\r\n            for (j = 1; j < n; j++) {\r\n                bjp = j * tox * bj - bjm;\r\n                bjm = bj;\r\n                bj = bjp;\r\n            }\r\n            ans = bj;\r\n        } else {\r\n            tox = 2.0 / ax;\r\n            m = 2 * ((n + (int) Math.sqrt(ACC * n)) / 2);\r\n            jsum = false;\r\n            bjp = ans = sum = 0.0;\r\n            bj = 1.0;\r\n            for (j = m; j > 0; j--) {\r\n                bjm = j * tox * bj - bjp;\r\n                bjp = bj;\r\n                bj = bjm;\r\n                if (Math.abs(bj) > BIGNO) {\r\n                    bj *= BIGNI;\r\n                    bjp *= BIGNI;\r\n                    ans *= BIGNI;\r\n                    sum *= BIGNI;\r\n                }\r\n                if (jsum) sum += bj;\r\n                jsum = !jsum;\r\n                if (j == n) ans = bjp;\r\n            }\r\n            sum = 2.0 * sum - bj;\r\n            ans /= sum;\r\n        }\r\n\r\n        return x < 0.0 && n % 2 == 1 ? -ans : ans;\r\n    }", "language": "java", "code": "public static double J(int n, double x) {\r\n        int j, m;\r\n        double ax, bj, bjm, bjp, sum, tox, ans;\r\n        boolean jsum;\r\n\r\n        double ACC = 40.0;\r\n        double BIGNO = 1.0e+10;\r\n        double BIGNI = 1.0e-10;\r\n\r\n        if (n == 0) return J0(x);\r\n        if (n == 1) return J(x);\r\n\r\n        ax = Math.abs(x);\r\n        if (ax == 0.0) return 0.0;\r\n        else if (ax > (double) n) {\r\n            tox = 2.0 / ax;\r\n            bjm = J0(ax);\r\n            bj = J(ax);\r\n            for (j = 1; j < n; j++) {\r\n                bjp = j * tox * bj - bjm;\r\n                bjm = bj;\r\n                bj = bjp;\r\n            }\r\n            ans = bj;\r\n        } else {\r\n            tox = 2.0 / ax;\r\n            m = 2 * ((n + (int) Math.sqrt(ACC * n)) / 2);\r\n            jsum = false;\r\n            bjp = ans = sum = 0.0;\r\n            bj = 1.0;\r\n            for (j = m; j > 0; j--) {\r\n                bjm = j * tox * bj - bjp;\r\n                bjp = bj;\r\n                bj = bjm;\r\n                if (Math.abs(bj) > BIGNO) {\r\n                    bj *= BIGNI;\r\n                    bjp *= BIGNI;\r\n                    ans *= BIGNI;\r\n                    sum *= BIGNI;\r\n                }\r\n                if (jsum) sum += bj;\r\n                jsum = !jsum;\r\n                if (j == n) ans = bjp;\r\n            }\r\n            sum = 2.0 * sum - bj;\r\n            ans /= sum;\r\n        }\r\n\r\n        return x < 0.0 && n % 2 == 1 ? -ans : ans;\r\n    }", "code_tokens": ["public", "static", "double", "J", "(", "int", "n", ",", "double", "x", ")", "{", "int", "j", ",", "m", ";", "double", "ax", ",", "bj", ",", "bjm", ",", "bjp", ",", "sum", ",", "tox", ",", "ans", ";", "boolean", "jsum", ";", "double", "ACC", "=", "40.0", ";", "double", "BIGNO", "=", "1.0e+10", ";", "double", "BIGNI", "=", "1.0e-10", ";", "if", "(", "n", "==", "0", ")", "return", "J0", "(", "x", ")", ";", "if", "(", "n", "==", "1", ")", "return", "J", "(", "x", ")", ";", "ax", "=", "Math", ".", "abs", "(", "x", ")", ";", "if", "(", "ax", "==", "0.0", ")", "return", "0.0", ";", "else", "if", "(", "ax", ">", "(", "double", ")", "n", ")", "{", "tox", "=", "2.0", "/", "ax", ";", "bjm", "=", "J0", "(", "ax", ")", ";", "bj", "=", "J", "(", "ax", ")", ";", "for", "(", "j", "=", "1", ";", "j", "<", "n", ";", "j", "++", ")", "{", "bjp", "=", "j", "*", "tox", "*", "bj", "-", "bjm", ";", "bjm", "=", "bj", ";", "bj", "=", "bjp", ";", "}", "ans", "=", "bj", ";", "}", "else", "{", "tox", "=", "2.0", "/", "ax", ";", "m", "=", "2", "*", "(", "(", "n", "+", "(", "int", ")", "Math", ".", "sqrt", "(", "ACC", "*", "n", ")", ")", "/", "2", ")", ";", "jsum", "=", "false", ";", "bjp", "=", "ans", "=", "sum", "=", "0.0", ";", "bj", "=", "1.0", ";", "for", "(", "j", "=", "m", ";", "j", ">", "0", ";", "j", "--", ")", "{", "bjm", "=", "j", "*", "tox", "*", "bj", "-", "bjp", ";", "bjp", "=", "bj", ";", "bj", "=", "bjm", ";", "if", "(", "Math", ".", "abs", "(", "bj", ")", ">", "BIGNO", ")", "{", "bj", "*=", "BIGNI", ";", "bjp", "*=", "BIGNI", ";", "ans", "*=", "BIGNI", ";", "sum", "*=", "BIGNI", ";", "}", "if", "(", "jsum", ")", "sum", "+=", "bj", ";", "jsum", "=", "!", "jsum", ";", "if", "(", "j", "==", "n", ")", "ans", "=", "bjp", ";", "}", "sum", "=", "2.0", "*", "sum", "-", "bj", ";", "ans", "/=", "sum", ";", "}", "return", "x", "<", "0.0", "&&", "n", "%", "2", "==", "1", "?", "-", "ans", ":", "ans", ";", "}"], "docstring": "Bessel function of order n.\n\n@param n Order.\n@param x Value.\n@return J value.", "docstring_tokens": ["Bessel", "function", "of", "order", "n", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/function/Bessel.java#L134-L183", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/function/Bessel.java", "func_name": "Bessel.Y0", "original_string": "public static double Y0(double x) {\r\n        if (x < 8.0) {\r\n            double y = x * x;\r\n\r\n            double ans1 = -2957821389.0 + y * (7062834065.0 + y * (-512359803.6\r\n                    + y * (10879881.29 + y * (-86327.92757 + y * 228.4622733))));\r\n            double ans2 = 40076544269.0 + y * (745249964.8 + y * (7189466.438\r\n                    + y * (47447.26470 + y * (226.1030244 + y * 1.0))));\r\n\r\n            return (ans1 / ans2) + 0.636619772 * J0(x) * Math.log(x);\r\n        } else {\r\n            double z = 8.0 / x;\r\n            double y = z * z;\r\n            double xx = x - 0.785398164;\r\n\r\n            double ans1 = 1.0 + y * (-0.1098628627e-2 + y * (0.2734510407e-4\r\n                    + y * (-0.2073370639e-5 + y * 0.2093887211e-6)));\r\n            double ans2 = -0.1562499995e-1 + y * (0.1430488765e-3\r\n                    + y * (-0.6911147651e-5 + y * (0.7621095161e-6\r\n                    + y * (-0.934945152e-7))));\r\n            return Math.sqrt(0.636619772 / x) *\r\n                    (Math.sin(xx) * ans1 + z * Math.cos(xx) * ans2);\r\n        }\r\n    }", "language": "java", "code": "public static double Y0(double x) {\r\n        if (x < 8.0) {\r\n            double y = x * x;\r\n\r\n            double ans1 = -2957821389.0 + y * (7062834065.0 + y * (-512359803.6\r\n                    + y * (10879881.29 + y * (-86327.92757 + y * 228.4622733))));\r\n            double ans2 = 40076544269.0 + y * (745249964.8 + y * (7189466.438\r\n                    + y * (47447.26470 + y * (226.1030244 + y * 1.0))));\r\n\r\n            return (ans1 / ans2) + 0.636619772 * J0(x) * Math.log(x);\r\n        } else {\r\n            double z = 8.0 / x;\r\n            double y = z * z;\r\n            double xx = x - 0.785398164;\r\n\r\n            double ans1 = 1.0 + y * (-0.1098628627e-2 + y * (0.2734510407e-4\r\n                    + y * (-0.2073370639e-5 + y * 0.2093887211e-6)));\r\n            double ans2 = -0.1562499995e-1 + y * (0.1430488765e-3\r\n                    + y * (-0.6911147651e-5 + y * (0.7621095161e-6\r\n                    + y * (-0.934945152e-7))));\r\n            return Math.sqrt(0.636619772 / x) *\r\n                    (Math.sin(xx) * ans1 + z * Math.cos(xx) * ans2);\r\n        }\r\n    }", "code_tokens": ["public", "static", "double", "Y0", "(", "double", "x", ")", "{", "if", "(", "x", "<", "8.0", ")", "{", "double", "y", "=", "x", "*", "x", ";", "double", "ans1", "=", "-", "2957821389.0", "+", "y", "*", "(", "7062834065.0", "+", "y", "*", "(", "-", "512359803.6", "+", "y", "*", "(", "10879881.29", "+", "y", "*", "(", "-", "86327.92757", "+", "y", "*", "228.4622733", ")", ")", ")", ")", ";", "double", "ans2", "=", "40076544269.0", "+", "y", "*", "(", "745249964.8", "+", "y", "*", "(", "7189466.438", "+", "y", "*", "(", "47447.26470", "+", "y", "*", "(", "226.1030244", "+", "y", "*", "1.0", ")", ")", ")", ")", ";", "return", "(", "ans1", "/", "ans2", ")", "+", "0.636619772", "*", "J0", "(", "x", ")", "*", "Math", ".", "log", "(", "x", ")", ";", "}", "else", "{", "double", "z", "=", "8.0", "/", "x", ";", "double", "y", "=", "z", "*", "z", ";", "double", "xx", "=", "x", "-", "0.785398164", ";", "double", "ans1", "=", "1.0", "+", "y", "*", "(", "-", "0.1098628627e-2", "+", "y", "*", "(", "0.2734510407e-4", "+", "y", "*", "(", "-", "0.2073370639e-5", "+", "y", "*", "0.2093887211e-6", ")", ")", ")", ";", "double", "ans2", "=", "-", "0.1562499995e-1", "+", "y", "*", "(", "0.1430488765e-3", "+", "y", "*", "(", "-", "0.6911147651e-5", "+", "y", "*", "(", "0.7621095161e-6", "+", "y", "*", "(", "-", "0.934945152e-7", ")", ")", ")", ")", ";", "return", "Math", ".", "sqrt", "(", "0.636619772", "/", "x", ")", "*", "(", "Math", ".", "sin", "(", "xx", ")", "*", "ans1", "+", "z", "*", "Math", ".", "cos", "(", "xx", ")", "*", "ans2", ")", ";", "}", "}"], "docstring": "Bessel function of the second kind, of order 0.\n\n@param x Value.\n@return Y0 value.", "docstring_tokens": ["Bessel", "function", "of", "the", "second", "kind", "of", "order", "0", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/function/Bessel.java#L191-L214", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/function/Bessel.java", "func_name": "Bessel.Y", "original_string": "public static double Y(double x) {\r\n        if (x < 8.0) {\r\n            double y = x * x;\r\n            double ans1 = x * (-0.4900604943e13 + y * (0.1275274390e13\r\n                    + y * (-0.5153438139e11 + y * (0.7349264551e9\r\n                    + y * (-0.4237922726e7 + y * 0.8511937935e4)))));\r\n            double ans2 = 0.2499580570e14 + y * (0.4244419664e12\r\n                    + y * (0.3733650367e10 + y * (0.2245904002e8\r\n                    + y * (0.1020426050e6 + y * (0.3549632885e3 + y)))));\r\n            return (ans1 / ans2) + 0.636619772 * (J(x) * Math.log(x) - 1.0 / x);\r\n        } else {\r\n            double z = 8.0 / x;\r\n            double y = z * z;\r\n            double xx = x - 2.356194491;\r\n            double ans1 = 1.0 + y * (0.183105e-2 + y * (-0.3516396496e-4\r\n                    + y * (0.2457520174e-5 + y * (-0.240337019e-6))));\r\n            double ans2 = 0.04687499995 + y * (-0.2002690873e-3\r\n                    + y * (0.8449199096e-5 + y * (-0.88228987e-6\r\n                    + y * 0.105787412e-6)));\r\n            return Math.sqrt(0.636619772 / x) *\r\n                    (Math.sin(xx) * ans1 + z * Math.cos(xx) * ans2);\r\n        }\r\n    }", "language": "java", "code": "public static double Y(double x) {\r\n        if (x < 8.0) {\r\n            double y = x * x;\r\n            double ans1 = x * (-0.4900604943e13 + y * (0.1275274390e13\r\n                    + y * (-0.5153438139e11 + y * (0.7349264551e9\r\n                    + y * (-0.4237922726e7 + y * 0.8511937935e4)))));\r\n            double ans2 = 0.2499580570e14 + y * (0.4244419664e12\r\n                    + y * (0.3733650367e10 + y * (0.2245904002e8\r\n                    + y * (0.1020426050e6 + y * (0.3549632885e3 + y)))));\r\n            return (ans1 / ans2) + 0.636619772 * (J(x) * Math.log(x) - 1.0 / x);\r\n        } else {\r\n            double z = 8.0 / x;\r\n            double y = z * z;\r\n            double xx = x - 2.356194491;\r\n            double ans1 = 1.0 + y * (0.183105e-2 + y * (-0.3516396496e-4\r\n                    + y * (0.2457520174e-5 + y * (-0.240337019e-6))));\r\n            double ans2 = 0.04687499995 + y * (-0.2002690873e-3\r\n                    + y * (0.8449199096e-5 + y * (-0.88228987e-6\r\n                    + y * 0.105787412e-6)));\r\n            return Math.sqrt(0.636619772 / x) *\r\n                    (Math.sin(xx) * ans1 + z * Math.cos(xx) * ans2);\r\n        }\r\n    }", "code_tokens": ["public", "static", "double", "Y", "(", "double", "x", ")", "{", "if", "(", "x", "<", "8.0", ")", "{", "double", "y", "=", "x", "*", "x", ";", "double", "ans1", "=", "x", "*", "(", "-", "0.4900604943e13", "+", "y", "*", "(", "0.1275274390e13", "+", "y", "*", "(", "-", "0.5153438139e11", "+", "y", "*", "(", "0.7349264551e9", "+", "y", "*", "(", "-", "0.4237922726e7", "+", "y", "*", "0.8511937935e4", ")", ")", ")", ")", ")", ";", "double", "ans2", "=", "0.2499580570e14", "+", "y", "*", "(", "0.4244419664e12", "+", "y", "*", "(", "0.3733650367e10", "+", "y", "*", "(", "0.2245904002e8", "+", "y", "*", "(", "0.1020426050e6", "+", "y", "*", "(", "0.3549632885e3", "+", "y", ")", ")", ")", ")", ")", ";", "return", "(", "ans1", "/", "ans2", ")", "+", "0.636619772", "*", "(", "J", "(", "x", ")", "*", "Math", ".", "log", "(", "x", ")", "-", "1.0", "/", "x", ")", ";", "}", "else", "{", "double", "z", "=", "8.0", "/", "x", ";", "double", "y", "=", "z", "*", "z", ";", "double", "xx", "=", "x", "-", "2.356194491", ";", "double", "ans1", "=", "1.0", "+", "y", "*", "(", "0.183105e-2", "+", "y", "*", "(", "-", "0.3516396496e-4", "+", "y", "*", "(", "0.2457520174e-5", "+", "y", "*", "(", "-", "0.240337019e-6", ")", ")", ")", ")", ";", "double", "ans2", "=", "0.04687499995", "+", "y", "*", "(", "-", "0.2002690873e-3", "+", "y", "*", "(", "0.8449199096e-5", "+", "y", "*", "(", "-", "0.88228987e-6", "+", "y", "*", "0.105787412e-6", ")", ")", ")", ";", "return", "Math", ".", "sqrt", "(", "0.636619772", "/", "x", ")", "*", "(", "Math", ".", "sin", "(", "xx", ")", "*", "ans1", "+", "z", "*", "Math", ".", "cos", "(", "xx", ")", "*", "ans2", ")", ";", "}", "}"], "docstring": "Bessel function of the second kind, of order 1.\n\n@param x Value.\n@return Y value.", "docstring_tokens": ["Bessel", "function", "of", "the", "second", "kind", "of", "order", "1", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/function/Bessel.java#L222-L244", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/function/Bessel.java", "func_name": "Bessel.Y", "original_string": "public static double Y(int n, double x) {\r\n        double by, bym, byp, tox;\r\n\r\n        if (n == 0) return Y0(x);\r\n        if (n == 1) return Y(x);\r\n\r\n        tox = 2.0 / x;\r\n        by = Y(x);\r\n        bym = Y0(x);\r\n        for (int j = 1; j < n; j++) {\r\n            byp = j * tox * by - bym;\r\n            bym = by;\r\n            by = byp;\r\n        }\r\n        return by;\r\n    }", "language": "java", "code": "public static double Y(int n, double x) {\r\n        double by, bym, byp, tox;\r\n\r\n        if (n == 0) return Y0(x);\r\n        if (n == 1) return Y(x);\r\n\r\n        tox = 2.0 / x;\r\n        by = Y(x);\r\n        bym = Y0(x);\r\n        for (int j = 1; j < n; j++) {\r\n            byp = j * tox * by - bym;\r\n            bym = by;\r\n            by = byp;\r\n        }\r\n        return by;\r\n    }", "code_tokens": ["public", "static", "double", "Y", "(", "int", "n", ",", "double", "x", ")", "{", "double", "by", ",", "bym", ",", "byp", ",", "tox", ";", "if", "(", "n", "==", "0", ")", "return", "Y0", "(", "x", ")", ";", "if", "(", "n", "==", "1", ")", "return", "Y", "(", "x", ")", ";", "tox", "=", "2.0", "/", "x", ";", "by", "=", "Y", "(", "x", ")", ";", "bym", "=", "Y0", "(", "x", ")", ";", "for", "(", "int", "j", "=", "1", ";", "j", "<", "n", ";", "j", "++", ")", "{", "byp", "=", "j", "*", "tox", "*", "by", "-", "bym", ";", "bym", "=", "by", ";", "by", "=", "byp", ";", "}", "return", "by", ";", "}"], "docstring": "Bessel function of the second kind, of order n.\n\n@param n Order.\n@param x Value.\n@return Y value.", "docstring_tokens": ["Bessel", "function", "of", "the", "second", "kind", "of", "order", "n", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/function/Bessel.java#L253-L268", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/function/Bessel.java", "func_name": "Bessel.I0", "original_string": "public static double I0(double x) {\r\n        double ans;\r\n        double ax = Math.abs(x);\r\n\r\n        if (ax < 3.75) {\r\n            double y = x / 3.75;\r\n            y = y * y;\r\n            ans = 1.0 + y * (3.5156229 + y * (3.0899424 + y * (1.2067492\r\n                    + y * (0.2659732 + y * (0.360768e-1 + y * 0.45813e-2)))));\r\n        } else {\r\n            double y = 3.75 / ax;\r\n            ans = (Math.exp(ax) / Math.sqrt(ax)) * (0.39894228 + y * (0.1328592e-1\r\n                    + y * (0.225319e-2 + y * (-0.157565e-2 + y * (0.916281e-2\r\n                    + y * (-0.2057706e-1 + y * (0.2635537e-1 + y * (-0.1647633e-1\r\n                    + y * 0.392377e-2))))))));\r\n        }\r\n\r\n        return ans;\r\n    }", "language": "java", "code": "public static double I0(double x) {\r\n        double ans;\r\n        double ax = Math.abs(x);\r\n\r\n        if (ax < 3.75) {\r\n            double y = x / 3.75;\r\n            y = y * y;\r\n            ans = 1.0 + y * (3.5156229 + y * (3.0899424 + y * (1.2067492\r\n                    + y * (0.2659732 + y * (0.360768e-1 + y * 0.45813e-2)))));\r\n        } else {\r\n            double y = 3.75 / ax;\r\n            ans = (Math.exp(ax) / Math.sqrt(ax)) * (0.39894228 + y * (0.1328592e-1\r\n                    + y * (0.225319e-2 + y * (-0.157565e-2 + y * (0.916281e-2\r\n                    + y * (-0.2057706e-1 + y * (0.2635537e-1 + y * (-0.1647633e-1\r\n                    + y * 0.392377e-2))))))));\r\n        }\r\n\r\n        return ans;\r\n    }", "code_tokens": ["public", "static", "double", "I0", "(", "double", "x", ")", "{", "double", "ans", ";", "double", "ax", "=", "Math", ".", "abs", "(", "x", ")", ";", "if", "(", "ax", "<", "3.75", ")", "{", "double", "y", "=", "x", "/", "3.75", ";", "y", "=", "y", "*", "y", ";", "ans", "=", "1.0", "+", "y", "*", "(", "3.5156229", "+", "y", "*", "(", "3.0899424", "+", "y", "*", "(", "1.2067492", "+", "y", "*", "(", "0.2659732", "+", "y", "*", "(", "0.360768e-1", "+", "y", "*", "0.45813e-2", ")", ")", ")", ")", ")", ";", "}", "else", "{", "double", "y", "=", "3.75", "/", "ax", ";", "ans", "=", "(", "Math", ".", "exp", "(", "ax", ")", "/", "Math", ".", "sqrt", "(", "ax", ")", ")", "*", "(", "0.39894228", "+", "y", "*", "(", "0.1328592e-1", "+", "y", "*", "(", "0.225319e-2", "+", "y", "*", "(", "-", "0.157565e-2", "+", "y", "*", "(", "0.916281e-2", "+", "y", "*", "(", "-", "0.2057706e-1", "+", "y", "*", "(", "0.2635537e-1", "+", "y", "*", "(", "-", "0.1647633e-1", "+", "y", "*", "0.392377e-2", ")", ")", ")", ")", ")", ")", ")", ")", ";", "}", "return", "ans", ";", "}"], "docstring": "Bessel function of the first kind, of order 0.\n\n@param x Value.\n@return I0 value.", "docstring_tokens": ["Bessel", "function", "of", "the", "first", "kind", "of", "order", "0", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/function/Bessel.java#L276-L294", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/function/Bessel.java", "func_name": "Bessel.I", "original_string": "public static double I(int n, double x) {\r\n        if (n < 0)\r\n            throw new IllegalArgumentException(\"the variable n out of range.\");\r\n        else if (n == 0)\r\n            return I0(x);\r\n        else if (n == 1)\r\n            return I(x);\r\n\r\n        if (x == 0.0)\r\n            return 0.0;\r\n\r\n        double ACC = 40.0;\r\n        double BIGNO = 1.0e+10;\r\n        double BIGNI = 1.0e-10;\r\n\r\n        double tox = 2.0 / Math.abs(x);\r\n        double bip = 0, ans = 0.0;\r\n        double bi = 1.0;\r\n\r\n        for (int j = 2 * (n + (int) Math.sqrt(ACC * n)); j > 0; j--) {\r\n            double bim = bip + j * tox * bi;\r\n            bip = bi;\r\n            bi = bim;\r\n\r\n            if (Math.abs(bi) > BIGNO) {\r\n                ans *= BIGNI;\r\n                bi *= BIGNI;\r\n                bip *= BIGNI;\r\n            }\r\n\r\n            if (j == n)\r\n                ans = bip;\r\n        }\r\n\r\n        ans *= I0(x) / bi;\r\n        return x < 0.0 && n % 2 == 1 ? -ans : ans;\r\n    }", "language": "java", "code": "public static double I(int n, double x) {\r\n        if (n < 0)\r\n            throw new IllegalArgumentException(\"the variable n out of range.\");\r\n        else if (n == 0)\r\n            return I0(x);\r\n        else if (n == 1)\r\n            return I(x);\r\n\r\n        if (x == 0.0)\r\n            return 0.0;\r\n\r\n        double ACC = 40.0;\r\n        double BIGNO = 1.0e+10;\r\n        double BIGNI = 1.0e-10;\r\n\r\n        double tox = 2.0 / Math.abs(x);\r\n        double bip = 0, ans = 0.0;\r\n        double bi = 1.0;\r\n\r\n        for (int j = 2 * (n + (int) Math.sqrt(ACC * n)); j > 0; j--) {\r\n            double bim = bip + j * tox * bi;\r\n            bip = bi;\r\n            bi = bim;\r\n\r\n            if (Math.abs(bi) > BIGNO) {\r\n                ans *= BIGNI;\r\n                bi *= BIGNI;\r\n                bip *= BIGNI;\r\n            }\r\n\r\n            if (j == n)\r\n                ans = bip;\r\n        }\r\n\r\n        ans *= I0(x) / bi;\r\n        return x < 0.0 && n % 2 == 1 ? -ans : ans;\r\n    }", "code_tokens": ["public", "static", "double", "I", "(", "int", "n", ",", "double", "x", ")", "{", "if", "(", "n", "<", "0", ")", "throw", "new", "IllegalArgumentException", "(", "\"the variable n out of range.\"", ")", ";", "else", "if", "(", "n", "==", "0", ")", "return", "I0", "(", "x", ")", ";", "else", "if", "(", "n", "==", "1", ")", "return", "I", "(", "x", ")", ";", "if", "(", "x", "==", "0.0", ")", "return", "0.0", ";", "double", "ACC", "=", "40.0", ";", "double", "BIGNO", "=", "1.0e+10", ";", "double", "BIGNI", "=", "1.0e-10", ";", "double", "tox", "=", "2.0", "/", "Math", ".", "abs", "(", "x", ")", ";", "double", "bip", "=", "0", ",", "ans", "=", "0.0", ";", "double", "bi", "=", "1.0", ";", "for", "(", "int", "j", "=", "2", "*", "(", "n", "+", "(", "int", ")", "Math", ".", "sqrt", "(", "ACC", "*", "n", ")", ")", ";", "j", ">", "0", ";", "j", "--", ")", "{", "double", "bim", "=", "bip", "+", "j", "*", "tox", "*", "bi", ";", "bip", "=", "bi", ";", "bi", "=", "bim", ";", "if", "(", "Math", ".", "abs", "(", "bi", ")", ">", "BIGNO", ")", "{", "ans", "*=", "BIGNI", ";", "bi", "*=", "BIGNI", ";", "bip", "*=", "BIGNI", ";", "}", "if", "(", "j", "==", "n", ")", "ans", "=", "bip", ";", "}", "ans", "*=", "I0", "(", "x", ")", "/", "bi", ";", "return", "x", "<", "0.0", "&&", "n", "%", "2", "==", "1", "?", "-", "ans", ":", "ans", ";", "}"], "docstring": "Bessel function of the first kind, of order n.\n\n@param n Order.\n@param x Value.\n@return I value.", "docstring_tokens": ["Bessel", "function", "of", "the", "first", "kind", "of", "order", "n", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/function/Bessel.java#L328-L364", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/effect/normal/SobelNormalMap.java", "func_name": "SobelNormalMap.apply", "original_string": "@Override\n    public ImageSource apply(ImageSource input) {\n        int w = input.getWidth();\n        int h = input.getHeight();\n\n        MatrixSource output = new MatrixSource(input);\n\n        Vector3 n = new Vector3(0, 0, 1);\n\n        for (int y = 0; y < h; y++) {\n            for (int x = 0; x < w; x++) {\n\n                if (x < border || x == w - border || y < border || y == h - border) {\n                    output.setRGB(x, y, VectorHelper.Z_NORMAL);\n                    continue;\n                }\n\n                float s0 = input.getR(x - 1, y + 1);\n                float s1 = input.getR(x, y + 1);\n                float s2 = input.getR(x + 1, y + 1);\n                float s3 = input.getR(x - 1, y);\n                float s5 = input.getR(x + 1, y);\n                float s6 = input.getR(x - 1, y - 1);\n                float s7 = input.getR(x, y - 1);\n                float s8 = input.getR(x + 1, y - 1);\n\n                float nx = -(s2 - s0 + 2 * (s5 - s3) + s8 - s6);\n                float ny = -(s6 - s0 + 2 * (s7 - s1) + s8 - s2);\n\n                n.set(nx, ny, scale);\n                n.nor();\n\n                int rgb = VectorHelper.vectorToColor(n);\n                output.setRGB(x, y, rgb);\n            }\n        }\n\n        return new MatrixSource(output);\n    }", "language": "java", "code": "@Override\n    public ImageSource apply(ImageSource input) {\n        int w = input.getWidth();\n        int h = input.getHeight();\n\n        MatrixSource output = new MatrixSource(input);\n\n        Vector3 n = new Vector3(0, 0, 1);\n\n        for (int y = 0; y < h; y++) {\n            for (int x = 0; x < w; x++) {\n\n                if (x < border || x == w - border || y < border || y == h - border) {\n                    output.setRGB(x, y, VectorHelper.Z_NORMAL);\n                    continue;\n                }\n\n                float s0 = input.getR(x - 1, y + 1);\n                float s1 = input.getR(x, y + 1);\n                float s2 = input.getR(x + 1, y + 1);\n                float s3 = input.getR(x - 1, y);\n                float s5 = input.getR(x + 1, y);\n                float s6 = input.getR(x - 1, y - 1);\n                float s7 = input.getR(x, y - 1);\n                float s8 = input.getR(x + 1, y - 1);\n\n                float nx = -(s2 - s0 + 2 * (s5 - s3) + s8 - s6);\n                float ny = -(s6 - s0 + 2 * (s7 - s1) + s8 - s2);\n\n                n.set(nx, ny, scale);\n                n.nor();\n\n                int rgb = VectorHelper.vectorToColor(n);\n                output.setRGB(x, y, rgb);\n            }\n        }\n\n        return new MatrixSource(output);\n    }", "code_tokens": ["@", "Override", "public", "ImageSource", "apply", "(", "ImageSource", "input", ")", "{", "int", "w", "=", "input", ".", "getWidth", "(", ")", ";", "int", "h", "=", "input", ".", "getHeight", "(", ")", ";", "MatrixSource", "output", "=", "new", "MatrixSource", "(", "input", ")", ";", "Vector3", "n", "=", "new", "Vector3", "(", "0", ",", "0", ",", "1", ")", ";", "for", "(", "int", "y", "=", "0", ";", "y", "<", "h", ";", "y", "++", ")", "{", "for", "(", "int", "x", "=", "0", ";", "x", "<", "w", ";", "x", "++", ")", "{", "if", "(", "x", "<", "border", "||", "x", "==", "w", "-", "border", "||", "y", "<", "border", "||", "y", "==", "h", "-", "border", ")", "{", "output", ".", "setRGB", "(", "x", ",", "y", ",", "VectorHelper", ".", "Z_NORMAL", ")", ";", "continue", ";", "}", "float", "s0", "=", "input", ".", "getR", "(", "x", "-", "1", ",", "y", "+", "1", ")", ";", "float", "s1", "=", "input", ".", "getR", "(", "x", ",", "y", "+", "1", ")", ";", "float", "s2", "=", "input", ".", "getR", "(", "x", "+", "1", ",", "y", "+", "1", ")", ";", "float", "s3", "=", "input", ".", "getR", "(", "x", "-", "1", ",", "y", ")", ";", "float", "s5", "=", "input", ".", "getR", "(", "x", "+", "1", ",", "y", ")", ";", "float", "s6", "=", "input", ".", "getR", "(", "x", "-", "1", ",", "y", "-", "1", ")", ";", "float", "s7", "=", "input", ".", "getR", "(", "x", ",", "y", "-", "1", ")", ";", "float", "s8", "=", "input", ".", "getR", "(", "x", "+", "1", ",", "y", "-", "1", ")", ";", "float", "nx", "=", "-", "(", "s2", "-", "s0", "+", "2", "*", "(", "s5", "-", "s3", ")", "+", "s8", "-", "s6", ")", ";", "float", "ny", "=", "-", "(", "s6", "-", "s0", "+", "2", "*", "(", "s7", "-", "s1", ")", "+", "s8", "-", "s2", ")", ";", "n", ".", "set", "(", "nx", ",", "ny", ",", "scale", ")", ";", "n", ".", "nor", "(", ")", ";", "int", "rgb", "=", "VectorHelper", ".", "vectorToColor", "(", "n", ")", ";", "output", ".", "setRGB", "(", "x", ",", "y", ",", "rgb", ")", ";", "}", "}", "return", "new", "MatrixSource", "(", "output", ")", ";", "}"], "docstring": "Sobel method to generate bump map from a height map\n\n@param input - A height map\n@return bump map", "docstring_tokens": ["Sobel", "method", "to", "generate", "bump", "map", "from", "a", "height", "map"], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/effect/normal/SobelNormalMap.java#L19-L57", "partition": "train"}
{"repo": "hyleung/ratpack-zipkin", "path": "src/main/java/ratpack/zipkin/internal/RatpackCurrentTraceContext.java", "func_name": "RatpackCurrentTraceContext.wrap", "original_string": "@Deprecated\n  public static TraceContextHolder wrap(TraceContext traceContext) {\n    return (traceContext != null) ? new TraceContextHolder(traceContext) : TraceContextHolder.EMPTY;\n  }", "language": "java", "code": "@Deprecated\n  public static TraceContextHolder wrap(TraceContext traceContext) {\n    return (traceContext != null) ? new TraceContextHolder(traceContext) : TraceContextHolder.EMPTY;\n  }", "code_tokens": ["@", "Deprecated", "public", "static", "TraceContextHolder", "wrap", "(", "TraceContext", "traceContext", ")", "{", "return", "(", "traceContext", "!=", "null", ")", "?", "new", "TraceContextHolder", "(", "traceContext", ")", ":", "TraceContextHolder", ".", "EMPTY", ";", "}"], "docstring": "Used by TracedParallelBatch where its used to wrap a TraceContext and puts it in the\nregistry for the forked execution.  This is marked deprecated as we prefer not to\nexpose details of the RatpackCurrentTraceContext implementation.\n\n@param traceContext a trace context.\n@return a holder for the trace context, which can be put into the registry.", "docstring_tokens": ["Used", "by", "TracedParallelBatch", "where", "its", "used", "to", "wrap", "a", "TraceContext", "and", "puts", "it", "in", "the", "registry", "for", "the", "forked", "execution", ".", "This", "is", "marked", "deprecated", "as", "we", "prefer", "not", "to", "expose", "details", "of", "the", "RatpackCurrentTraceContext", "implementation", "."], "sha": "3c9e4b05e3f5fab034c1f7832fffce8a55c311d3", "url": "https://github.com/hyleung/ratpack-zipkin/blob/3c9e4b05e3f5fab034c1f7832fffce8a55c311d3/src/main/java/ratpack/zipkin/internal/RatpackCurrentTraceContext.java#L64-L67", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/Tools.java", "func_name": "Tools.Sinc", "original_string": "public static double Sinc(double x) {\r\n        return Math.sin(Math.PI * x) / (Math.PI * x);\r\n    }", "language": "java", "code": "public static double Sinc(double x) {\r\n        return Math.sin(Math.PI * x) / (Math.PI * x);\r\n    }", "code_tokens": ["public", "static", "double", "Sinc", "(", "double", "x", ")", "{", "return", "Math", ".", "sin", "(", "Math", ".", "PI", "*", "x", ")", "/", "(", "Math", ".", "PI", "*", "x", ")", ";", "}"], "docstring": "Sinc function.\n\n@param x Value.\n@return Sinc of the value.", "docstring_tokens": ["Sinc", "function", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/Tools.java#L68-L70", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/Tools.java", "func_name": "Tools.Mod", "original_string": "public static int Mod(int x, int m) {\r\n        if (m < 0) m = -m;\r\n        int r = x % m;\r\n        return r < 0 ? r + m : r;\r\n    }", "language": "java", "code": "public static int Mod(int x, int m) {\r\n        if (m < 0) m = -m;\r\n        int r = x % m;\r\n        return r < 0 ? r + m : r;\r\n    }", "code_tokens": ["public", "static", "int", "Mod", "(", "int", "x", ",", "int", "m", ")", "{", "if", "(", "m", "<", "0", ")", "m", "=", "-", "m", ";", "int", "r", "=", "x", "%", "m", ";", "return", "r", "<", "0", "?", "r", "+", "m", ":", "r", ";", "}"], "docstring": "Gets the proper modulus operation.\n\n@param x Integer.\n@param m Modulo.\n@return Modulus.", "docstring_tokens": ["Gets", "the", "proper", "modulus", "operation", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/Tools.java#L349-L353", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/Tools.java", "func_name": "Tools.NextPowerOf2", "original_string": "public static int NextPowerOf2(int x) {\r\n        --x;\r\n        x |= x >> 1;\r\n        x |= x >> 2;\r\n        x |= x >> 4;\r\n        x |= x >> 8;\r\n        x |= x >> 16;\r\n        return ++x;\r\n    }", "language": "java", "code": "public static int NextPowerOf2(int x) {\r\n        --x;\r\n        x |= x >> 1;\r\n        x |= x >> 2;\r\n        x |= x >> 4;\r\n        x |= x >> 8;\r\n        x |= x >> 16;\r\n        return ++x;\r\n    }", "code_tokens": ["public", "static", "int", "NextPowerOf2", "(", "int", "x", ")", "{", "--", "x", ";", "x", "|=", "x", ">>", "1", ";", "x", "|=", "x", ">>", "2", ";", "x", "|=", "x", ">>", "4", ";", "x", "|=", "x", ">>", "8", ";", "x", "|=", "x", ">>", "16", ";", "return", "++", "x", ";", "}"], "docstring": "Returns the next power of 2 after the input value x.\n\n@param x Input value x.\n@return Returns the next power of 2 after the input value x.", "docstring_tokens": ["Returns", "the", "next", "power", "of", "2", "after", "the", "input", "value", "x", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/Tools.java#L361-L369", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/Tools.java", "func_name": "Tools.Sum", "original_string": "public static float Sum(float[] data) {\r\n        float sum = 0;\r\n        for (int i = 0; i < data.length; i++) {\r\n            sum += data[i];\r\n        }\r\n        return sum;\r\n    }", "language": "java", "code": "public static float Sum(float[] data) {\r\n        float sum = 0;\r\n        for (int i = 0; i < data.length; i++) {\r\n            sum += data[i];\r\n        }\r\n        return sum;\r\n    }", "code_tokens": ["public", "static", "float", "Sum", "(", "float", "[", "]", "data", ")", "{", "float", "sum", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "data", ".", "length", ";", "i", "++", ")", "{", "sum", "+=", "data", "[", "i", "]", ";", "}", "return", "sum", ";", "}"], "docstring": "Sum of the elements.\n\n@param data Data.\n@return Sum(data).", "docstring_tokens": ["Sum", "of", "the", "elements", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/Tools.java#L502-L508", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/Tools.java", "func_name": "Tools.TruncatedPower", "original_string": "public static double TruncatedPower(double value, double degree) {\r\n        double x = Math.pow(value, degree);\r\n        return (x > 0) ? x : 0.0;\r\n    }", "language": "java", "code": "public static double TruncatedPower(double value, double degree) {\r\n        double x = Math.pow(value, degree);\r\n        return (x > 0) ? x : 0.0;\r\n    }", "code_tokens": ["public", "static", "double", "TruncatedPower", "(", "double", "value", ",", "double", "degree", ")", "{", "double", "x", "=", "Math", ".", "pow", "(", "value", ",", "degree", ")", ";", "return", "(", "x", ">", "0", ")", "?", "x", ":", "0.0", ";", "}"], "docstring": "Truncated power function.\n\n@param value  Value.\n@param degree Degree.\n@return Result.", "docstring_tokens": ["Truncated", "power", "function", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/Tools.java#L528-L531", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/Tools.java", "func_name": "Tools.Unique", "original_string": "public static int[] Unique(int[] values) {\r\n        HashSet<Integer> lst = new HashSet<Integer>();\r\n        for (int i = 0; i < values.length; i++) {\r\n            lst.add(values[i]);\r\n        }\r\n\r\n        int[] v = new int[lst.size()];\r\n        Iterator<Integer> it = lst.iterator();\r\n        for (int i = 0; i < v.length; i++) {\r\n            v[i] = it.next();\r\n        }\r\n\r\n        return v;\r\n    }", "language": "java", "code": "public static int[] Unique(int[] values) {\r\n        HashSet<Integer> lst = new HashSet<Integer>();\r\n        for (int i = 0; i < values.length; i++) {\r\n            lst.add(values[i]);\r\n        }\r\n\r\n        int[] v = new int[lst.size()];\r\n        Iterator<Integer> it = lst.iterator();\r\n        for (int i = 0; i < v.length; i++) {\r\n            v[i] = it.next();\r\n        }\r\n\r\n        return v;\r\n    }", "code_tokens": ["public", "static", "int", "[", "]", "Unique", "(", "int", "[", "]", "values", ")", "{", "HashSet", "<", "Integer", ">", "lst", "=", "new", "HashSet", "<", "Integer", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "values", ".", "length", ";", "i", "++", ")", "{", "lst", ".", "add", "(", "values", "[", "i", "]", ")", ";", "}", "int", "[", "]", "v", "=", "new", "int", "[", "lst", ".", "size", "(", ")", "]", ";", "Iterator", "<", "Integer", ">", "it", "=", "lst", ".", "iterator", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "v", ".", "length", ";", "i", "++", ")", "{", "v", "[", "i", "]", "=", "it", ".", "next", "(", ")", ";", "}", "return", "v", ";", "}"], "docstring": "Get unique values form the array.\n\n@param values Array of values.\n@return Unique values.", "docstring_tokens": ["Get", "unique", "values", "form", "the", "array", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/Tools.java#L539-L552", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/effect/AlphaTrimmedMean.java", "func_name": "AlphaTrimmedMean.setT", "original_string": "public void setT(int t) {\r\n        this.t = Math.min((radius * 2 + 1) * (radius * 2 + 1) / 2, Math.max(0, t));\r\n    }", "language": "java", "code": "public void setT(int t) {\r\n        this.t = Math.min((radius * 2 + 1) * (radius * 2 + 1) / 2, Math.max(0, t));\r\n    }", "code_tokens": ["public", "void", "setT", "(", "int", "t", ")", "{", "this", ".", "t", "=", "Math", ".", "min", "(", "(", "radius", "*", "2", "+", "1", ")", "*", "(", "radius", "*", "2", "+", "1", ")", "/", "2", ",", "Math", ".", "max", "(", "0", ",", "t", ")", ")", ";", "}"], "docstring": "Set trimmed value.\n\n@param t Trimmed value.", "docstring_tokens": ["Set", "trimmed", "value", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/effect/AlphaTrimmedMean.java#L60-L62", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/TaylorSeries.java", "func_name": "TaylorSeries.Sin", "original_string": "public static double Sin(double x, int nTerms) {\r\n        if (nTerms < 2) return x;\r\n        if (nTerms == 2) {\r\n            return x - (x * x * x) / 6D;\r\n        } else {\r\n\r\n            double mult = x * x * x;\r\n            double fact = 6;\r\n            double sign = 1;\r\n            int factS = 5;\r\n            double result = x - mult / fact;\r\n            for (int i = 3; i <= nTerms; i++) {\r\n                mult *= x * x;\r\n                fact *= factS * (factS - 1);\r\n                factS += 2;\r\n                result += sign * (mult / fact);\r\n                sign *= -1;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }", "language": "java", "code": "public static double Sin(double x, int nTerms) {\r\n        if (nTerms < 2) return x;\r\n        if (nTerms == 2) {\r\n            return x - (x * x * x) / 6D;\r\n        } else {\r\n\r\n            double mult = x * x * x;\r\n            double fact = 6;\r\n            double sign = 1;\r\n            int factS = 5;\r\n            double result = x - mult / fact;\r\n            for (int i = 3; i <= nTerms; i++) {\r\n                mult *= x * x;\r\n                fact *= factS * (factS - 1);\r\n                factS += 2;\r\n                result += sign * (mult / fact);\r\n                sign *= -1;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }", "code_tokens": ["public", "static", "double", "Sin", "(", "double", "x", ",", "int", "nTerms", ")", "{", "if", "(", "nTerms", "<", "2", ")", "return", "x", ";", "if", "(", "nTerms", "==", "2", ")", "{", "return", "x", "-", "(", "x", "*", "x", "*", "x", ")", "/", "6D", ";", "}", "else", "{", "double", "mult", "=", "x", "*", "x", "*", "x", ";", "double", "fact", "=", "6", ";", "double", "sign", "=", "1", ";", "int", "factS", "=", "5", ";", "double", "result", "=", "x", "-", "mult", "/", "fact", ";", "for", "(", "int", "i", "=", "3", ";", "i", "<=", "nTerms", ";", "i", "++", ")", "{", "mult", "*=", "x", "*", "x", ";", "fact", "*=", "factS", "*", "(", "factS", "-", "1", ")", ";", "factS", "+=", "2", ";", "result", "+=", "sign", "*", "(", "mult", "/", "fact", ")", ";", "sign", "*=", "-", "1", ";", "}", "return", "result", ";", "}", "}"], "docstring": "compute Sin using Taylor Series.\n\n@param x      An angle, in radians.\n@param nTerms Number of terms.\n@return Result.", "docstring_tokens": ["compute", "Sin", "using", "Taylor", "Series", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/TaylorSeries.java#L47-L68", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/TaylorSeries.java", "func_name": "TaylorSeries.Sinh", "original_string": "public static double Sinh(double x, int nTerms) {\r\n        if (nTerms < 2) return x;\r\n        if (nTerms == 2) {\r\n            return x + (x * x * x) / 6D;\r\n        } else {\r\n\r\n            double mult = x * x * x;\r\n            double fact = 6;\r\n            int factS = 5;\r\n            double result = x + mult / fact;\r\n            for (int i = 3; i <= nTerms; i++) {\r\n                mult *= x * x;\r\n                fact *= factS * (factS - 1);\r\n                factS += 2;\r\n                result += mult / fact;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }", "language": "java", "code": "public static double Sinh(double x, int nTerms) {\r\n        if (nTerms < 2) return x;\r\n        if (nTerms == 2) {\r\n            return x + (x * x * x) / 6D;\r\n        } else {\r\n\r\n            double mult = x * x * x;\r\n            double fact = 6;\r\n            int factS = 5;\r\n            double result = x + mult / fact;\r\n            for (int i = 3; i <= nTerms; i++) {\r\n                mult *= x * x;\r\n                fact *= factS * (factS - 1);\r\n                factS += 2;\r\n                result += mult / fact;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }", "code_tokens": ["public", "static", "double", "Sinh", "(", "double", "x", ",", "int", "nTerms", ")", "{", "if", "(", "nTerms", "<", "2", ")", "return", "x", ";", "if", "(", "nTerms", "==", "2", ")", "{", "return", "x", "+", "(", "x", "*", "x", "*", "x", ")", "/", "6D", ";", "}", "else", "{", "double", "mult", "=", "x", "*", "x", "*", "x", ";", "double", "fact", "=", "6", ";", "int", "factS", "=", "5", ";", "double", "result", "=", "x", "+", "mult", "/", "fact", ";", "for", "(", "int", "i", "=", "3", ";", "i", "<=", "nTerms", ";", "i", "++", ")", "{", "mult", "*=", "x", "*", "x", ";", "fact", "*=", "factS", "*", "(", "factS", "-", "1", ")", ";", "factS", "+=", "2", ";", "result", "+=", "mult", "/", "fact", ";", "}", "return", "result", ";", "}", "}"], "docstring": "compute Sinh using Taylor Series.\n\n@param x      An angle, in radians.\n@param nTerms Number of terms.\n@return Result.", "docstring_tokens": ["compute", "Sinh", "using", "Taylor", "Series", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/TaylorSeries.java#L107-L126", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/TaylorSeries.java", "func_name": "TaylorSeries.Cosh", "original_string": "public static double Cosh(double x, int nTerms) {\r\n        if (nTerms < 2) return x;\r\n        if (nTerms == 2) {\r\n            return 1 + (x * x) / 2D;\r\n        } else {\r\n\r\n            double mult = x * x;\r\n            double fact = 2;\r\n            int factS = 4;\r\n            double result = 1 + mult / fact;\r\n            for (int i = 3; i <= nTerms; i++) {\r\n                mult *= x * x;\r\n                fact *= factS * (factS - 1);\r\n                factS += 2;\r\n                result += mult / fact;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }", "language": "java", "code": "public static double Cosh(double x, int nTerms) {\r\n        if (nTerms < 2) return x;\r\n        if (nTerms == 2) {\r\n            return 1 + (x * x) / 2D;\r\n        } else {\r\n\r\n            double mult = x * x;\r\n            double fact = 2;\r\n            int factS = 4;\r\n            double result = 1 + mult / fact;\r\n            for (int i = 3; i <= nTerms; i++) {\r\n                mult *= x * x;\r\n                fact *= factS * (factS - 1);\r\n                factS += 2;\r\n                result += mult / fact;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }", "code_tokens": ["public", "static", "double", "Cosh", "(", "double", "x", ",", "int", "nTerms", ")", "{", "if", "(", "nTerms", "<", "2", ")", "return", "x", ";", "if", "(", "nTerms", "==", "2", ")", "{", "return", "1", "+", "(", "x", "*", "x", ")", "/", "2D", ";", "}", "else", "{", "double", "mult", "=", "x", "*", "x", ";", "double", "fact", "=", "2", ";", "int", "factS", "=", "4", ";", "double", "result", "=", "1", "+", "mult", "/", "fact", ";", "for", "(", "int", "i", "=", "3", ";", "i", "<=", "nTerms", ";", "i", "++", ")", "{", "mult", "*=", "x", "*", "x", ";", "fact", "*=", "factS", "*", "(", "factS", "-", "1", ")", ";", "factS", "+=", "2", ";", "result", "+=", "mult", "/", "fact", ";", "}", "return", "result", ";", "}", "}"], "docstring": "compute Cosh using Taylor Series.\n\n@param x      An angle, in radians.\n@param nTerms Number of terms.\n@return Result.", "docstring_tokens": ["compute", "Cosh", "using", "Taylor", "Series", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/TaylorSeries.java#L135-L154", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/TaylorSeries.java", "func_name": "TaylorSeries.Exp", "original_string": "public static double Exp(double x, int nTerms) {\r\n        if (nTerms < 2) return 1 + x;\r\n        if (nTerms == 2) {\r\n            return 1 + x + (x * x) / 2;\r\n        } else {\r\n\r\n            double mult = x * x;\r\n            double fact = 2;\r\n            double result = 1 + x + mult / fact;\r\n            for (int i = 3; i <= nTerms; i++) {\r\n                mult *= x;\r\n                fact *= i;\r\n                result += mult / fact;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }", "language": "java", "code": "public static double Exp(double x, int nTerms) {\r\n        if (nTerms < 2) return 1 + x;\r\n        if (nTerms == 2) {\r\n            return 1 + x + (x * x) / 2;\r\n        } else {\r\n\r\n            double mult = x * x;\r\n            double fact = 2;\r\n            double result = 1 + x + mult / fact;\r\n            for (int i = 3; i <= nTerms; i++) {\r\n                mult *= x;\r\n                fact *= i;\r\n                result += mult / fact;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }", "code_tokens": ["public", "static", "double", "Exp", "(", "double", "x", ",", "int", "nTerms", ")", "{", "if", "(", "nTerms", "<", "2", ")", "return", "1", "+", "x", ";", "if", "(", "nTerms", "==", "2", ")", "{", "return", "1", "+", "x", "+", "(", "x", "*", "x", ")", "/", "2", ";", "}", "else", "{", "double", "mult", "=", "x", "*", "x", ";", "double", "fact", "=", "2", ";", "double", "result", "=", "1", "+", "x", "+", "mult", "/", "fact", ";", "for", "(", "int", "i", "=", "3", ";", "i", "<=", "nTerms", ";", "i", "++", ")", "{", "mult", "*=", "x", ";", "fact", "*=", "i", ";", "result", "+=", "mult", "/", "fact", ";", "}", "return", "result", ";", "}", "}"], "docstring": "compute Exp using Taylor Series.\n\n@param x      An angle, in radians.\n@param nTerms Number of terms.\n@return Result.", "docstring_tokens": ["compute", "Exp", "using", "Taylor", "Series", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/TaylorSeries.java#L163-L180", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/decomposition/LUDecomposition.java", "func_name": "LUDecomposition.getU", "original_string": "public double[][] getU() {\n        double[][] X = new double[n][n];\n        double[][] U = X;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i <= j) {\n                    U[i][j] = LU[i][j];\n                } else {\n                    U[i][j] = 0.0;\n                }\n            }\n        }\n        return X;\n    }", "language": "java", "code": "public double[][] getU() {\n        double[][] X = new double[n][n];\n        double[][] U = X;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i <= j) {\n                    U[i][j] = LU[i][j];\n                } else {\n                    U[i][j] = 0.0;\n                }\n            }\n        }\n        return X;\n    }", "code_tokens": ["public", "double", "[", "]", "[", "]", "getU", "(", ")", "{", "double", "[", "]", "[", "]", "X", "=", "new", "double", "[", "n", "]", "[", "n", "]", ";", "double", "[", "]", "[", "]", "U", "=", "X", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "if", "(", "i", "<=", "j", ")", "{", "U", "[", "i", "]", "[", "j", "]", "=", "LU", "[", "i", "]", "[", "j", "]", ";", "}", "else", "{", "U", "[", "i", "]", "[", "j", "]", "=", "0.0", ";", "}", "}", "}", "return", "X", ";", "}"], "docstring": "Get the Upper triangular factor.\n\n@return U.", "docstring_tokens": ["Get", "the", "Upper", "triangular", "factor", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/decomposition/LUDecomposition.java#L194-L207", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/decomposition/LUDecomposition.java", "func_name": "LUDecomposition.determinant", "original_string": "public double determinant() {\n        if (m != n) {\n            throw new IllegalArgumentException(\"Matrix must be square.\");\n        }\n        double d = (double) pivsign;\n        for (int j = 0; j < n; j++) {\n            d *= LU[j][j];\n        }\n        return d;\n    }", "language": "java", "code": "public double determinant() {\n        if (m != n) {\n            throw new IllegalArgumentException(\"Matrix must be square.\");\n        }\n        double d = (double) pivsign;\n        for (int j = 0; j < n; j++) {\n            d *= LU[j][j];\n        }\n        return d;\n    }", "code_tokens": ["public", "double", "determinant", "(", ")", "{", "if", "(", "m", "!=", "n", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Matrix must be square.\"", ")", ";", "}", "double", "d", "=", "(", "double", ")", "pivsign", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "d", "*=", "LU", "[", "j", "]", "[", "j", "]", ";", "}", "return", "d", ";", "}"], "docstring": "Calculate the determinant.\n\n@return Determinant.", "docstring_tokens": ["Calculate", "the", "determinant", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/decomposition/LUDecomposition.java#L244-L253", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Add", "original_string": "public static ComplexNumber Add(ComplexNumber z1, ComplexNumber z2) {\r\n        return new ComplexNumber(z1.real + z2.real, z1.imaginary + z2.imaginary);\r\n    }", "language": "java", "code": "public static ComplexNumber Add(ComplexNumber z1, ComplexNumber z2) {\r\n        return new ComplexNumber(z1.real + z2.real, z1.imaginary + z2.imaginary);\r\n    }", "code_tokens": ["public", "static", "ComplexNumber", "Add", "(", "ComplexNumber", "z1", ",", "ComplexNumber", "z2", ")", "{", "return", "new", "ComplexNumber", "(", "z1", ".", "real", "+", "z2", ".", "real", ",", "z1", ".", "imaginary", "+", "z2", ".", "imaginary", ")", ";", "}"], "docstring": "Adds two complex numbers.\n\n@param z1 Complex Number.\n@param z2 Complex Number.\n@return Returns new ComplexNumber instance containing the sum of specified complex numbers.", "docstring_tokens": ["Adds", "two", "complex", "numbers", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L241-L243", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Add", "original_string": "public static ComplexNumber Add(ComplexNumber z1, double scalar) {\r\n        return new ComplexNumber(z1.real + scalar, z1.imaginary);\r\n    }", "language": "java", "code": "public static ComplexNumber Add(ComplexNumber z1, double scalar) {\r\n        return new ComplexNumber(z1.real + scalar, z1.imaginary);\r\n    }", "code_tokens": ["public", "static", "ComplexNumber", "Add", "(", "ComplexNumber", "z1", ",", "double", "scalar", ")", "{", "return", "new", "ComplexNumber", "(", "z1", ".", "real", "+", "scalar", ",", "z1", ".", "imaginary", ")", ";", "}"], "docstring": "Adds the complex number with a scalar value.\n\n@param z1     Complex Number.\n@param scalar Scalar value.\n@return Returns new ComplexNumber instance containing the add of specified complex number with scalar value.", "docstring_tokens": ["Adds", "the", "complex", "number", "with", "a", "scalar", "value", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L252-L254", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Subtract", "original_string": "public static ComplexNumber Subtract(ComplexNumber z1, ComplexNumber z2) {\r\n        return new ComplexNumber(z1.real - z2.real, z1.imaginary - z2.imaginary);\r\n    }", "language": "java", "code": "public static ComplexNumber Subtract(ComplexNumber z1, ComplexNumber z2) {\r\n        return new ComplexNumber(z1.real - z2.real, z1.imaginary - z2.imaginary);\r\n    }", "code_tokens": ["public", "static", "ComplexNumber", "Subtract", "(", "ComplexNumber", "z1", ",", "ComplexNumber", "z2", ")", "{", "return", "new", "ComplexNumber", "(", "z1", ".", "real", "-", "z2", ".", "real", ",", "z1", ".", "imaginary", "-", "z2", ".", "imaginary", ")", ";", "}"], "docstring": "Subtract two complex numbers.\n\n@param z1 Complex Number.\n@param z2 Complex Number.\n@return Returns new ComplexNumber instance containing the subtract of specified complex numbers.", "docstring_tokens": ["Subtract", "two", "complex", "numbers", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L272-L274", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Subtract", "original_string": "public static ComplexNumber Subtract(ComplexNumber z1, double scalar) {\r\n        return new ComplexNumber(z1.real - scalar, z1.imaginary);\r\n    }", "language": "java", "code": "public static ComplexNumber Subtract(ComplexNumber z1, double scalar) {\r\n        return new ComplexNumber(z1.real - scalar, z1.imaginary);\r\n    }", "code_tokens": ["public", "static", "ComplexNumber", "Subtract", "(", "ComplexNumber", "z1", ",", "double", "scalar", ")", "{", "return", "new", "ComplexNumber", "(", "z1", ".", "real", "-", "scalar", ",", "z1", ".", "imaginary", ")", ";", "}"], "docstring": "Subtract a complex number.\n\n@param z1     Complex Number.\n@param scalar Scalar value.\n@return Returns new ComplexNumber instance containing the subtract of specified complex number with a scalar value.", "docstring_tokens": ["Subtract", "a", "complex", "number", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L283-L285", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Magnitude", "original_string": "public static double Magnitude(ComplexNumber z) {\r\n        return Math.sqrt(z.real * z.real + z.imaginary * z.imaginary);\r\n    }", "language": "java", "code": "public static double Magnitude(ComplexNumber z) {\r\n        return Math.sqrt(z.real * z.real + z.imaginary * z.imaginary);\r\n    }", "code_tokens": ["public", "static", "double", "Magnitude", "(", "ComplexNumber", "z", ")", "{", "return", "Math", ".", "sqrt", "(", "z", ".", "real", "*", "z", ".", "real", "+", "z", ".", "imaginary", "*", "z", ".", "imaginary", ")", ";", "}"], "docstring": "Magnitude of complex number.\n\n@param z Complex number.\n@return Magnitude of complex number.", "docstring_tokens": ["Magnitude", "of", "complex", "number", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L302-L304", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Multiply", "original_string": "public static ComplexNumber Multiply(ComplexNumber z1, ComplexNumber z2) {\r\n        double z1R = z1.real, z1I = z1.imaginary;\r\n        double z2R = z2.real, z2I = z2.imaginary;\r\n\r\n        return new ComplexNumber(z1R * z2R - z1I * z2I, z1R * z2I + z1I * z2R);\r\n    }", "language": "java", "code": "public static ComplexNumber Multiply(ComplexNumber z1, ComplexNumber z2) {\r\n        double z1R = z1.real, z1I = z1.imaginary;\r\n        double z2R = z2.real, z2I = z2.imaginary;\r\n\r\n        return new ComplexNumber(z1R * z2R - z1I * z2I, z1R * z2I + z1I * z2R);\r\n    }", "code_tokens": ["public", "static", "ComplexNumber", "Multiply", "(", "ComplexNumber", "z1", ",", "ComplexNumber", "z2", ")", "{", "double", "z1R", "=", "z1", ".", "real", ",", "z1I", "=", "z1", ".", "imaginary", ";", "double", "z2R", "=", "z2", ".", "real", ",", "z2I", "=", "z2", ".", "imaginary", ";", "return", "new", "ComplexNumber", "(", "z1R", "*", "z2R", "-", "z1I", "*", "z2I", ",", "z1R", "*", "z2I", "+", "z1I", "*", "z2R", ")", ";", "}"], "docstring": "Multiply two complex numbers.\n\n@param z1 Complex Number.\n@param z2 Complex Number.\n@return Returns new ComplexNumber instance containing the multiply of specified complex numbers.", "docstring_tokens": ["Multiply", "two", "complex", "numbers", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L313-L318", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Multiply", "original_string": "public static ComplexNumber Multiply(ComplexNumber z1, double scalar) {\r\n        return new ComplexNumber(z1.real * scalar, z1.imaginary * scalar);\r\n    }", "language": "java", "code": "public static ComplexNumber Multiply(ComplexNumber z1, double scalar) {\r\n        return new ComplexNumber(z1.real * scalar, z1.imaginary * scalar);\r\n    }", "code_tokens": ["public", "static", "ComplexNumber", "Multiply", "(", "ComplexNumber", "z1", ",", "double", "scalar", ")", "{", "return", "new", "ComplexNumber", "(", "z1", ".", "real", "*", "scalar", ",", "z1", ".", "imaginary", "*", "scalar", ")", ";", "}"], "docstring": "Multiply scalar value to a complex number.\n\n@param z1     Complex Number.\n@param scalar Scalar value.\n@return Returns new ComplexNumber instance containing the multiply of specified complex number with the scalar value.", "docstring_tokens": ["Multiply", "scalar", "value", "to", "a", "complex", "number", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L327-L329", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Divide", "original_string": "public static ComplexNumber Divide(ComplexNumber z1, ComplexNumber z2) {\r\n\r\n        ComplexNumber conj = ComplexNumber.Conjugate(z2);\r\n\r\n        double a = z1.real * conj.real + ((z1.imaginary * conj.imaginary) * -1);\r\n        double b = z1.real * conj.imaginary + (z1.imaginary * conj.real);\r\n\r\n        double c = z2.real * conj.real + ((z2.imaginary * conj.imaginary) * -1);\r\n\r\n        return new ComplexNumber(a / c, b / c);\r\n    }", "language": "java", "code": "public static ComplexNumber Divide(ComplexNumber z1, ComplexNumber z2) {\r\n\r\n        ComplexNumber conj = ComplexNumber.Conjugate(z2);\r\n\r\n        double a = z1.real * conj.real + ((z1.imaginary * conj.imaginary) * -1);\r\n        double b = z1.real * conj.imaginary + (z1.imaginary * conj.real);\r\n\r\n        double c = z2.real * conj.real + ((z2.imaginary * conj.imaginary) * -1);\r\n\r\n        return new ComplexNumber(a / c, b / c);\r\n    }", "code_tokens": ["public", "static", "ComplexNumber", "Divide", "(", "ComplexNumber", "z1", ",", "ComplexNumber", "z2", ")", "{", "ComplexNumber", "conj", "=", "ComplexNumber", ".", "Conjugate", "(", "z2", ")", ";", "double", "a", "=", "z1", ".", "real", "*", "conj", ".", "real", "+", "(", "(", "z1", ".", "imaginary", "*", "conj", ".", "imaginary", ")", "*", "-", "1", ")", ";", "double", "b", "=", "z1", ".", "real", "*", "conj", ".", "imaginary", "+", "(", "z1", ".", "imaginary", "*", "conj", ".", "real", ")", ";", "double", "c", "=", "z2", ".", "real", "*", "conj", ".", "real", "+", "(", "(", "z2", ".", "imaginary", "*", "conj", ".", "imaginary", ")", "*", "-", "1", ")", ";", "return", "new", "ComplexNumber", "(", "a", "/", "c", ",", "b", "/", "c", ")", ";", "}"], "docstring": "Divide two complex numbers.\n\n@param z1 Complex Number.\n@param z2 Complex Number.\n@return Returns new ComplexNumber instance containing the divide of specified complex numbers.", "docstring_tokens": ["Divide", "two", "complex", "numbers", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L348-L358", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Pow", "original_string": "public static ComplexNumber Pow(ComplexNumber z1, double n) {\r\n\r\n        double norm = Math.pow(z1.getMagnitude(), n);\r\n        double angle = 360 - Math.abs(Math.toDegrees(Math.atan(z1.imaginary / z1.real)));\r\n\r\n        double common = n * angle;\r\n\r\n        double r = norm * Math.cos(Math.toRadians(common));\r\n        double i = norm * Math.sin(Math.toRadians(common));\r\n\r\n        return new ComplexNumber(r, i);\r\n\r\n    }", "language": "java", "code": "public static ComplexNumber Pow(ComplexNumber z1, double n) {\r\n\r\n        double norm = Math.pow(z1.getMagnitude(), n);\r\n        double angle = 360 - Math.abs(Math.toDegrees(Math.atan(z1.imaginary / z1.real)));\r\n\r\n        double common = n * angle;\r\n\r\n        double r = norm * Math.cos(Math.toRadians(common));\r\n        double i = norm * Math.sin(Math.toRadians(common));\r\n\r\n        return new ComplexNumber(r, i);\r\n\r\n    }", "code_tokens": ["public", "static", "ComplexNumber", "Pow", "(", "ComplexNumber", "z1", ",", "double", "n", ")", "{", "double", "norm", "=", "Math", ".", "pow", "(", "z1", ".", "getMagnitude", "(", ")", ",", "n", ")", ";", "double", "angle", "=", "360", "-", "Math", ".", "abs", "(", "Math", ".", "toDegrees", "(", "Math", ".", "atan", "(", "z1", ".", "imaginary", "/", "z1", ".", "real", ")", ")", ")", ";", "double", "common", "=", "n", "*", "angle", ";", "double", "r", "=", "norm", "*", "Math", ".", "cos", "(", "Math", ".", "toRadians", "(", "common", ")", ")", ";", "double", "i", "=", "norm", "*", "Math", ".", "sin", "(", "Math", ".", "toRadians", "(", "common", ")", ")", ";", "return", "new", "ComplexNumber", "(", "r", ",", "i", ")", ";", "}"], "docstring": "Calculate power of a complex number.\n\n@param z1 Complex Number.\n@param n  Power.\n@return Returns a new complex number containing the power of a specified number.", "docstring_tokens": ["Calculate", "power", "of", "a", "complex", "number", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L414-L426", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Sin", "original_string": "public static ComplexNumber Sin(ComplexNumber z1) {\r\n        ComplexNumber result = new ComplexNumber();\r\n\r\n        if (z1.imaginary == 0.0) {\r\n            result.real = Math.sin(z1.real);\r\n            result.imaginary = 0.0;\r\n        } else {\r\n            result.real = Math.sin(z1.real) * Math.cosh(z1.imaginary);\r\n            result.imaginary = Math.cos(z1.real) * Math.sinh(z1.imaginary);\r\n        }\r\n\r\n        return result;\r\n    }", "language": "java", "code": "public static ComplexNumber Sin(ComplexNumber z1) {\r\n        ComplexNumber result = new ComplexNumber();\r\n\r\n        if (z1.imaginary == 0.0) {\r\n            result.real = Math.sin(z1.real);\r\n            result.imaginary = 0.0;\r\n        } else {\r\n            result.real = Math.sin(z1.real) * Math.cosh(z1.imaginary);\r\n            result.imaginary = Math.cos(z1.real) * Math.sinh(z1.imaginary);\r\n        }\r\n\r\n        return result;\r\n    }", "code_tokens": ["public", "static", "ComplexNumber", "Sin", "(", "ComplexNumber", "z1", ")", "{", "ComplexNumber", "result", "=", "new", "ComplexNumber", "(", ")", ";", "if", "(", "z1", ".", "imaginary", "==", "0.0", ")", "{", "result", ".", "real", "=", "Math", ".", "sin", "(", "z1", ".", "real", ")", ";", "result", ".", "imaginary", "=", "0.0", ";", "}", "else", "{", "result", ".", "real", "=", "Math", ".", "sin", "(", "z1", ".", "real", ")", "*", "Math", ".", "cosh", "(", "z1", ".", "imaginary", ")", ";", "result", ".", "imaginary", "=", "Math", ".", "cos", "(", "z1", ".", "real", ")", "*", "Math", ".", "sinh", "(", "z1", ".", "imaginary", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Calculates Sine value of the complex number.\n\n@param z1 A Complex Number instance.\n@return Returns new ComplexNumber instance containing the Sine value of the specified complex number.", "docstring_tokens": ["Calculates", "Sine", "value", "of", "the", "complex", "number", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L491-L503", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/ComplexNumber.java", "func_name": "ComplexNumber.Tan", "original_string": "public static ComplexNumber Tan(ComplexNumber z1) {\r\n        ComplexNumber result = new ComplexNumber();\r\n\r\n        if (z1.imaginary == 0.0) {\r\n            result.real = Math.tan(z1.real);\r\n            result.imaginary = 0.0;\r\n        } else {\r\n            double real2 = 2 * z1.real;\r\n            double imag2 = 2 * z1.imaginary;\r\n            double denom = Math.cos(real2) + Math.cosh(real2);\r\n\r\n            result.real = Math.sin(real2) / denom;\r\n            result.imaginary = Math.sinh(imag2) / denom;\r\n        }\r\n\r\n        return result;\r\n    }", "language": "java", "code": "public static ComplexNumber Tan(ComplexNumber z1) {\r\n        ComplexNumber result = new ComplexNumber();\r\n\r\n        if (z1.imaginary == 0.0) {\r\n            result.real = Math.tan(z1.real);\r\n            result.imaginary = 0.0;\r\n        } else {\r\n            double real2 = 2 * z1.real;\r\n            double imag2 = 2 * z1.imaginary;\r\n            double denom = Math.cos(real2) + Math.cosh(real2);\r\n\r\n            result.real = Math.sin(real2) / denom;\r\n            result.imaginary = Math.sinh(imag2) / denom;\r\n        }\r\n\r\n        return result;\r\n    }", "code_tokens": ["public", "static", "ComplexNumber", "Tan", "(", "ComplexNumber", "z1", ")", "{", "ComplexNumber", "result", "=", "new", "ComplexNumber", "(", ")", ";", "if", "(", "z1", ".", "imaginary", "==", "0.0", ")", "{", "result", ".", "real", "=", "Math", ".", "tan", "(", "z1", ".", "real", ")", ";", "result", ".", "imaginary", "=", "0.0", ";", "}", "else", "{", "double", "real2", "=", "2", "*", "z1", ".", "real", ";", "double", "imag2", "=", "2", "*", "z1", ".", "imaginary", ";", "double", "denom", "=", "Math", ".", "cos", "(", "real2", ")", "+", "Math", ".", "cosh", "(", "real2", ")", ";", "result", ".", "real", "=", "Math", ".", "sin", "(", "real2", ")", "/", "denom", ";", "result", ".", "imaginary", "=", "Math", ".", "sinh", "(", "imag2", ")", "/", "denom", ";", "}", "return", "result", ";", "}"], "docstring": "Calculates Tangent value of the complex number.\n\n@param z1 A ComplexNumber instance.\n@return Returns new ComplexNumber instance containing the Tangent value of the specified complex number.", "docstring_tokens": ["Calculates", "Tangent", "value", "of", "the", "complex", "number", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/ComplexNumber.java#L531-L547", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/random/UniversalGenerator.java", "func_name": "UniversalGenerator.srand", "original_string": "private void srand(int ijkl) {\n        u = new double[97];\n\n        int ij = ijkl / 30082;\n        int kl = ijkl % 30082;\n\n        // Handle the seed range errors\n        // First random number seed must be between 0 and 31328\n        // Second seed must have a value between 0 and 30081\n        if (ij < 0 || ij > 31328 || kl < 0 || kl > 30081) {\n            ij = ij % 31329;\n            kl = kl % 30082;\n        }\n\n        int i = ((ij / 177) % 177) + 2;\n        int j = (ij % 177) + 2;\n        int k = ((kl / 169) % 178) + 1;\n        int l = kl % 169;\n\n        int m;\n        double s, t;\n        for (int ii = 0; ii < 97; ii++) {\n            s = 0.0;\n            t = 0.5;\n            for (int jj = 0; jj < 24; jj++) {\n                m = (((i * j) % 179) * k) % 179;\n                i = j;\n                j = k;\n                k = m;\n                l = (53 * l + 1) % 169;\n                if (((l * m) % 64) >= 32) {\n                    s += t;\n                }\n                t *= 0.5;\n            }\n            u[ii] = s;\n        }\n\n        c = 362436.0 / 16777216.0;\n        cd = 7654321.0 / 16777216.0;\n        cm = 16777213.0 / 16777216.0;\n        i97 = 96;\n        j97 = 32;\n    }", "language": "java", "code": "private void srand(int ijkl) {\n        u = new double[97];\n\n        int ij = ijkl / 30082;\n        int kl = ijkl % 30082;\n\n        // Handle the seed range errors\n        // First random number seed must be between 0 and 31328\n        // Second seed must have a value between 0 and 30081\n        if (ij < 0 || ij > 31328 || kl < 0 || kl > 30081) {\n            ij = ij % 31329;\n            kl = kl % 30082;\n        }\n\n        int i = ((ij / 177) % 177) + 2;\n        int j = (ij % 177) + 2;\n        int k = ((kl / 169) % 178) + 1;\n        int l = kl % 169;\n\n        int m;\n        double s, t;\n        for (int ii = 0; ii < 97; ii++) {\n            s = 0.0;\n            t = 0.5;\n            for (int jj = 0; jj < 24; jj++) {\n                m = (((i * j) % 179) * k) % 179;\n                i = j;\n                j = k;\n                k = m;\n                l = (53 * l + 1) % 169;\n                if (((l * m) % 64) >= 32) {\n                    s += t;\n                }\n                t *= 0.5;\n            }\n            u[ii] = s;\n        }\n\n        c = 362436.0 / 16777216.0;\n        cd = 7654321.0 / 16777216.0;\n        cm = 16777213.0 / 16777216.0;\n        i97 = 96;\n        j97 = 32;\n    }", "code_tokens": ["private", "void", "srand", "(", "int", "ijkl", ")", "{", "u", "=", "new", "double", "[", "97", "]", ";", "int", "ij", "=", "ijkl", "/", "30082", ";", "int", "kl", "=", "ijkl", "%", "30082", ";", "// Handle the seed range errors", "// First random number seed must be between 0 and 31328", "// Second seed must have a value between 0 and 30081", "if", "(", "ij", "<", "0", "||", "ij", ">", "31328", "||", "kl", "<", "0", "||", "kl", ">", "30081", ")", "{", "ij", "=", "ij", "%", "31329", ";", "kl", "=", "kl", "%", "30082", ";", "}", "int", "i", "=", "(", "(", "ij", "/", "177", ")", "%", "177", ")", "+", "2", ";", "int", "j", "=", "(", "ij", "%", "177", ")", "+", "2", ";", "int", "k", "=", "(", "(", "kl", "/", "169", ")", "%", "178", ")", "+", "1", ";", "int", "l", "=", "kl", "%", "169", ";", "int", "m", ";", "double", "s", ",", "t", ";", "for", "(", "int", "ii", "=", "0", ";", "ii", "<", "97", ";", "ii", "++", ")", "{", "s", "=", "0.0", ";", "t", "=", "0.5", ";", "for", "(", "int", "jj", "=", "0", ";", "jj", "<", "24", ";", "jj", "++", ")", "{", "m", "=", "(", "(", "(", "i", "*", "j", ")", "%", "179", ")", "*", "k", ")", "%", "179", ";", "i", "=", "j", ";", "j", "=", "k", ";", "k", "=", "m", ";", "l", "=", "(", "53", "*", "l", "+", "1", ")", "%", "169", ";", "if", "(", "(", "(", "l", "*", "m", ")", "%", "64", ")", ">=", "32", ")", "{", "s", "+=", "t", ";", "}", "t", "*=", "0.5", ";", "}", "u", "[", "ii", "]", "=", "s", ";", "}", "c", "=", "362436.0", "/", "16777216.0", ";", "cd", "=", "7654321.0", "/", "16777216.0", ";", "cm", "=", "16777213.0", "/", "16777216.0", ";", "i97", "=", "96", ";", "j97", "=", "32", ";", "}"], "docstring": "Initialize the random generator with a seed.", "docstring_tokens": ["Initialize", "the", "random", "generator", "with", "a", "seed", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/random/UniversalGenerator.java#L85-L128", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/core/IntPoint.java", "func_name": "IntPoint.DistanceTo", "original_string": "public float DistanceTo(IntPoint anotherPoint) {\r\n        float dx = this.x - anotherPoint.x;\r\n        float dy = this.y - anotherPoint.y;\r\n\r\n        return (float) Math.sqrt(dx * dx + dy * dy);\r\n    }", "language": "java", "code": "public float DistanceTo(IntPoint anotherPoint) {\r\n        float dx = this.x - anotherPoint.x;\r\n        float dy = this.y - anotherPoint.y;\r\n\r\n        return (float) Math.sqrt(dx * dx + dy * dy);\r\n    }", "code_tokens": ["public", "float", "DistanceTo", "(", "IntPoint", "anotherPoint", ")", "{", "float", "dx", "=", "this", ".", "x", "-", "anotherPoint", ".", "x", ";", "float", "dy", "=", "this", ".", "y", "-", "anotherPoint", ".", "y", ";", "return", "(", "float", ")", "Math", ".", "sqrt", "(", "dx", "*", "dx", "+", "dy", "*", "dy", ")", ";", "}"], "docstring": "Calculate Euclidean distance between two points.\n\n@param anotherPoint Point to calculate distance to.\n@return Euclidean distance between this point and anotherPoint points.", "docstring_tokens": ["Calculate", "Euclidean", "distance", "between", "two", "points", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/core/IntPoint.java#L260-L265", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/statistics/HistogramStatistics.java", "func_name": "HistogramStatistics.Entropy", "original_string": "public static double Entropy( int[] values ){\n        int     n = values.length;\n        int     total = 0;\n        double  entropy = 0;\n        double  p;\n\n        // calculate total amount of hits\n        for ( int i = 0; i < n; i++ )\n        {\n            total += values[i];\n        }\n\n        if ( total != 0 )\n        {\n            // for all values\n            for ( int i = 0; i < n; i++ )\n            {\n                // get item's probability\n                p = (double) values[i] / total;\n                // calculate entropy\n                if ( p != 0 )\n                    entropy += ( -p * (Math.log10(p)/Math.log10(2)) );\n            }\n        }\n        return entropy;\n    }", "language": "java", "code": "public static double Entropy( int[] values ){\n        int     n = values.length;\n        int     total = 0;\n        double  entropy = 0;\n        double  p;\n\n        // calculate total amount of hits\n        for ( int i = 0; i < n; i++ )\n        {\n            total += values[i];\n        }\n\n        if ( total != 0 )\n        {\n            // for all values\n            for ( int i = 0; i < n; i++ )\n            {\n                // get item's probability\n                p = (double) values[i] / total;\n                // calculate entropy\n                if ( p != 0 )\n                    entropy += ( -p * (Math.log10(p)/Math.log10(2)) );\n            }\n        }\n        return entropy;\n    }", "code_tokens": ["public", "static", "double", "Entropy", "(", "int", "[", "]", "values", ")", "{", "int", "n", "=", "values", ".", "length", ";", "int", "total", "=", "0", ";", "double", "entropy", "=", "0", ";", "double", "p", ";", "// calculate total amount of hits", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "total", "+=", "values", "[", "i", "]", ";", "}", "if", "(", "total", "!=", "0", ")", "{", "// for all values", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "// get item's probability", "p", "=", "(", "double", ")", "values", "[", "i", "]", "/", "total", ";", "// calculate entropy", "if", "(", "p", "!=", "0", ")", "entropy", "+=", "(", "-", "p", "*", "(", "Math", ".", "log10", "(", "p", ")", "/", "Math", ".", "log10", "(", "2", ")", ")", ")", ";", "}", "}", "return", "entropy", ";", "}"], "docstring": "Calculate entropy value.\n@param values Values.\n@return Returns entropy value of the specified histogram array.", "docstring_tokens": ["Calculate", "entropy", "value", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/statistics/HistogramStatistics.java#L46-L71", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/statistics/HistogramStatistics.java", "func_name": "HistogramStatistics.GetRange", "original_string": "public static IntRange GetRange( int[] values, double percent ){\n        int total = 0, n = values.length;\n\n        // for all values\n        for ( int i = 0; i < n; i++ )\n        {\n            // accumalate total\n            total += values[i];\n        }\n\n        int min, max, hits;\n        int h = (int) ( total * ( percent + ( 1 - percent ) / 2 ) );\n\n        // get range min value\n        for ( min = 0, hits = total; min < n; min++ )\n        {\n            hits -= values[min];\n            if ( hits < h )\n                break;\n        }\n        // get range max value\n        for ( max = n - 1, hits = total; max >= 0; max-- )\n        {\n            hits -= values[max];\n            if ( hits < h )\n                break;\n        }\n        return new IntRange( min, max );\n    }", "language": "java", "code": "public static IntRange GetRange( int[] values, double percent ){\n        int total = 0, n = values.length;\n\n        // for all values\n        for ( int i = 0; i < n; i++ )\n        {\n            // accumalate total\n            total += values[i];\n        }\n\n        int min, max, hits;\n        int h = (int) ( total * ( percent + ( 1 - percent ) / 2 ) );\n\n        // get range min value\n        for ( min = 0, hits = total; min < n; min++ )\n        {\n            hits -= values[min];\n            if ( hits < h )\n                break;\n        }\n        // get range max value\n        for ( max = n - 1, hits = total; max >= 0; max-- )\n        {\n            hits -= values[max];\n            if ( hits < h )\n                break;\n        }\n        return new IntRange( min, max );\n    }", "code_tokens": ["public", "static", "IntRange", "GetRange", "(", "int", "[", "]", "values", ",", "double", "percent", ")", "{", "int", "total", "=", "0", ",", "n", "=", "values", ".", "length", ";", "// for all values", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "// accumalate total", "total", "+=", "values", "[", "i", "]", ";", "}", "int", "min", ",", "max", ",", "hits", ";", "int", "h", "=", "(", "int", ")", "(", "total", "*", "(", "percent", "+", "(", "1", "-", "percent", ")", "/", "2", ")", ")", ";", "// get range min value", "for", "(", "min", "=", "0", ",", "hits", "=", "total", ";", "min", "<", "n", ";", "min", "++", ")", "{", "hits", "-=", "values", "[", "min", "]", ";", "if", "(", "hits", "<", "h", ")", "break", ";", "}", "// get range max value", "for", "(", "max", "=", "n", "-", "1", ",", "hits", "=", "total", ";", "max", ">=", "0", ";", "max", "--", ")", "{", "hits", "-=", "values", "[", "max", "]", ";", "if", "(", "hits", "<", "h", ")", "break", ";", "}", "return", "new", "IntRange", "(", "min", ",", "max", ")", ";", "}"], "docstring": "Get range around median containing specified percentage of values.\n@param values Values.\n@param percent Values percentage around median.\n@return Returns the range which containes specifies percentage of values.", "docstring_tokens": ["Get", "range", "around", "median", "containing", "specified", "percentage", "of", "values", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/statistics/HistogramStatistics.java#L79-L107", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/statistics/HistogramStatistics.java", "func_name": "HistogramStatistics.Median", "original_string": "public static int Median( int[] values ){\n        int total = 0, n = values.length;\n\n        // for all values\n        for ( int i = 0; i < n; i++ )\n        {\n            // accumalate total\n            total += values[i];\n        }\n\n        int halfTotal = total / 2;\n        int median = 0, v = 0;\n\n        // find median value\n        for ( ; median < n; median++ )\n        {\n            v += values[median];\n            if ( v >= halfTotal )\n                break;\n        }\n\n        return median;\n    }", "language": "java", "code": "public static int Median( int[] values ){\n        int total = 0, n = values.length;\n\n        // for all values\n        for ( int i = 0; i < n; i++ )\n        {\n            // accumalate total\n            total += values[i];\n        }\n\n        int halfTotal = total / 2;\n        int median = 0, v = 0;\n\n        // find median value\n        for ( ; median < n; median++ )\n        {\n            v += values[median];\n            if ( v >= halfTotal )\n                break;\n        }\n\n        return median;\n    }", "code_tokens": ["public", "static", "int", "Median", "(", "int", "[", "]", "values", ")", "{", "int", "total", "=", "0", ",", "n", "=", "values", ".", "length", ";", "// for all values", "for", "(", "int", "i", "=", "0", ";", "i", "<", "n", ";", "i", "++", ")", "{", "// accumalate total", "total", "+=", "values", "[", "i", "]", ";", "}", "int", "halfTotal", "=", "total", "/", "2", ";", "int", "median", "=", "0", ",", "v", "=", "0", ";", "// find median value", "for", "(", ";", "median", "<", "n", ";", "median", "++", ")", "{", "v", "+=", "values", "[", "median", "]", ";", "if", "(", "v", ">=", "halfTotal", ")", "break", ";", "}", "return", "median", ";", "}"], "docstring": "Calculate Median value.\n@param values Values.\n@return Median.", "docstring_tokens": ["Calculate", "Median", "value", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/statistics/HistogramStatistics.java#L172-L194", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/statistics/HistogramStatistics.java", "func_name": "HistogramStatistics.Mode", "original_string": "public static int Mode( int[] values ){\n        int mode = 0, curMax = 0;\n\n        for ( int i = 0, length = values.length; i < length; i++ )\n        {\n            if ( values[i] > curMax )\n            {\n                curMax = values[i];\n                mode = i;\n            }\n        }\n        return mode;\n    }", "language": "java", "code": "public static int Mode( int[] values ){\n        int mode = 0, curMax = 0;\n\n        for ( int i = 0, length = values.length; i < length; i++ )\n        {\n            if ( values[i] > curMax )\n            {\n                curMax = values[i];\n                mode = i;\n            }\n        }\n        return mode;\n    }", "code_tokens": ["public", "static", "int", "Mode", "(", "int", "[", "]", "values", ")", "{", "int", "mode", "=", "0", ",", "curMax", "=", "0", ";", "for", "(", "int", "i", "=", "0", ",", "length", "=", "values", ".", "length", ";", "i", "<", "length", ";", "i", "++", ")", "{", "if", "(", "values", "[", "i", "]", ">", "curMax", ")", "{", "curMax", "=", "values", "[", "i", "]", ";", "mode", "=", "i", ";", "}", "}", "return", "mode", ";", "}"], "docstring": "Calculate Mode value.\n@param values Values.\n@return Returns mode value of the histogram array.", "docstring_tokens": ["Calculate", "Mode", "value", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/statistics/HistogramStatistics.java#L201-L213", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/statistics/HistogramStatistics.java", "func_name": "HistogramStatistics.StdDev", "original_string": "public static double StdDev( int[] values, double mean ){\n        double  stddev = 0;\n        double  diff;\n        int     hits;\n        int     total = 0;\n\n        // for all values\n        for ( int i = 0, n = values.length; i < n; i++ )\n        {\n            hits = values[i];\n            diff = (double) i - mean;\n            // accumulate std.dev.\n            stddev += diff * diff * hits;\n            // accumalate total\n            total += hits;\n        }\n\n        return ( total == 0 ) ? 0 : Math.sqrt( stddev / (total - 1) );\n    }", "language": "java", "code": "public static double StdDev( int[] values, double mean ){\n        double  stddev = 0;\n        double  diff;\n        int     hits;\n        int     total = 0;\n\n        // for all values\n        for ( int i = 0, n = values.length; i < n; i++ )\n        {\n            hits = values[i];\n            diff = (double) i - mean;\n            // accumulate std.dev.\n            stddev += diff * diff * hits;\n            // accumalate total\n            total += hits;\n        }\n\n        return ( total == 0 ) ? 0 : Math.sqrt( stddev / (total - 1) );\n    }", "code_tokens": ["public", "static", "double", "StdDev", "(", "int", "[", "]", "values", ",", "double", "mean", ")", "{", "double", "stddev", "=", "0", ";", "double", "diff", ";", "int", "hits", ";", "int", "total", "=", "0", ";", "// for all values", "for", "(", "int", "i", "=", "0", ",", "n", "=", "values", ".", "length", ";", "i", "<", "n", ";", "i", "++", ")", "{", "hits", "=", "values", "[", "i", "]", ";", "diff", "=", "(", "double", ")", "i", "-", "mean", ";", "// accumulate std.dev.", "stddev", "+=", "diff", "*", "diff", "*", "hits", ";", "// accumalate total", "total", "+=", "hits", ";", "}", "return", "(", "total", "==", "0", ")", "?", "0", ":", "Math", ".", "sqrt", "(", "stddev", "/", "(", "total", "-", "1", ")", ")", ";", "}"], "docstring": "Calculate standart deviation.\n@param values Values.\n@param mean Mean.\n@return Standart deviation.", "docstring_tokens": ["Calculate", "standart", "deviation", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/statistics/HistogramStatistics.java#L263-L281", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/transform/DiscreteCosineTransform.java", "func_name": "DiscreteCosineTransform.Forward", "original_string": "public static void Forward(double[] data) {\n\n        double[] result = new double[data.length];\n        double sum;\n        double scale = Math.sqrt(2.0 / data.length);\n        for (int f = 0; f < data.length; f++) {\n            sum = 0;\n            for (int t = 0; t < data.length; t++) {\n                double cos = Math.cos(((2.0 * t + 1.0) * f * Math.PI) / (2.0 * data.length));\n                sum += data[t] * cos * alpha(f);\n            }\n            result[f] = scale * sum;\n        }\n        for (int i = 0; i < data.length; i++) {\n            data[i] = result[i];\n        }\n    }", "language": "java", "code": "public static void Forward(double[] data) {\n\n        double[] result = new double[data.length];\n        double sum;\n        double scale = Math.sqrt(2.0 / data.length);\n        for (int f = 0; f < data.length; f++) {\n            sum = 0;\n            for (int t = 0; t < data.length; t++) {\n                double cos = Math.cos(((2.0 * t + 1.0) * f * Math.PI) / (2.0 * data.length));\n                sum += data[t] * cos * alpha(f);\n            }\n            result[f] = scale * sum;\n        }\n        for (int i = 0; i < data.length; i++) {\n            data[i] = result[i];\n        }\n    }", "code_tokens": ["public", "static", "void", "Forward", "(", "double", "[", "]", "data", ")", "{", "double", "[", "]", "result", "=", "new", "double", "[", "data", ".", "length", "]", ";", "double", "sum", ";", "double", "scale", "=", "Math", ".", "sqrt", "(", "2.0", "/", "data", ".", "length", ")", ";", "for", "(", "int", "f", "=", "0", ";", "f", "<", "data", ".", "length", ";", "f", "++", ")", "{", "sum", "=", "0", ";", "for", "(", "int", "t", "=", "0", ";", "t", "<", "data", ".", "length", ";", "t", "++", ")", "{", "double", "cos", "=", "Math", ".", "cos", "(", "(", "(", "2.0", "*", "t", "+", "1.0", ")", "*", "f", "*", "Math", ".", "PI", ")", "/", "(", "2.0", "*", "data", ".", "length", ")", ")", ";", "sum", "+=", "data", "[", "t", "]", "*", "cos", "*", "alpha", "(", "f", ")", ";", "}", "result", "[", "f", "]", "=", "scale", "*", "sum", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "data", ".", "length", ";", "i", "++", ")", "{", "data", "[", "i", "]", "=", "result", "[", "i", "]", ";", "}", "}"], "docstring": "1-D Forward Discrete Cosine Transform.\n\n@param data Data.", "docstring_tokens": ["1", "-", "D", "Forward", "Discrete", "Cosine", "Transform", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/transform/DiscreteCosineTransform.java#L45-L61", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/transform/DiscreteCosineTransform.java", "func_name": "DiscreteCosineTransform.Forward", "original_string": "public static void Forward(double[][] data) {\n        int rows = data.length;\n        int cols = data[0].length;\n\n        double[] row = new double[cols];\n        double[] col = new double[rows];\n\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < row.length; j++)\n                row[j] = data[i][j];\n\n            Forward(row);\n\n            for (int j = 0; j < row.length; j++)\n                data[i][j] = row[j];\n        }\n\n        for (int j = 0; j < cols; j++) {\n            for (int i = 0; i < col.length; i++)\n                col[i] = data[i][j];\n\n            Forward(col);\n\n            for (int i = 0; i < col.length; i++)\n                data[i][j] = col[i];\n        }\n    }", "language": "java", "code": "public static void Forward(double[][] data) {\n        int rows = data.length;\n        int cols = data[0].length;\n\n        double[] row = new double[cols];\n        double[] col = new double[rows];\n\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < row.length; j++)\n                row[j] = data[i][j];\n\n            Forward(row);\n\n            for (int j = 0; j < row.length; j++)\n                data[i][j] = row[j];\n        }\n\n        for (int j = 0; j < cols; j++) {\n            for (int i = 0; i < col.length; i++)\n                col[i] = data[i][j];\n\n            Forward(col);\n\n            for (int i = 0; i < col.length; i++)\n                data[i][j] = col[i];\n        }\n    }", "code_tokens": ["public", "static", "void", "Forward", "(", "double", "[", "]", "[", "]", "data", ")", "{", "int", "rows", "=", "data", ".", "length", ";", "int", "cols", "=", "data", "[", "0", "]", ".", "length", ";", "double", "[", "]", "row", "=", "new", "double", "[", "cols", "]", ";", "double", "[", "]", "col", "=", "new", "double", "[", "rows", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "rows", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "row", ".", "length", ";", "j", "++", ")", "row", "[", "j", "]", "=", "data", "[", "i", "]", "[", "j", "]", ";", "Forward", "(", "row", ")", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "row", ".", "length", ";", "j", "++", ")", "data", "[", "i", "]", "[", "j", "]", "=", "row", "[", "j", "]", ";", "}", "for", "(", "int", "j", "=", "0", ";", "j", "<", "cols", ";", "j", "++", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "col", ".", "length", ";", "i", "++", ")", "col", "[", "i", "]", "=", "data", "[", "i", "]", "[", "j", "]", ";", "Forward", "(", "col", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "col", ".", "length", ";", "i", "++", ")", "data", "[", "i", "]", "[", "j", "]", "=", "col", "[", "i", "]", ";", "}", "}"], "docstring": "2-D Forward Discrete Cosine Transform.\n\n@param data Data.", "docstring_tokens": ["2", "-", "D", "Forward", "Discrete", "Cosine", "Transform", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/transform/DiscreteCosineTransform.java#L68-L94", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/transform/DiscreteCosineTransform.java", "func_name": "DiscreteCosineTransform.Backward", "original_string": "public static void Backward(double[] data) {\n\n        double[] result = new double[data.length];\n        double sum;\n        double scale = Math.sqrt(2.0 / data.length);\n        for (int t = 0; t < data.length; t++) {\n            sum = 0;\n            for (int j = 0; j < data.length; j++) {\n                double cos = Math.cos(((2 * t + 1) * j * Math.PI) / (2 * data.length));\n                sum += alpha(j) * data[j] * cos;\n            }\n            result[t] = scale * sum;\n        }\n        for (int i = 0; i < data.length; i++) {\n            data[i] = result[i];\n        }\n    }", "language": "java", "code": "public static void Backward(double[] data) {\n\n        double[] result = new double[data.length];\n        double sum;\n        double scale = Math.sqrt(2.0 / data.length);\n        for (int t = 0; t < data.length; t++) {\n            sum = 0;\n            for (int j = 0; j < data.length; j++) {\n                double cos = Math.cos(((2 * t + 1) * j * Math.PI) / (2 * data.length));\n                sum += alpha(j) * data[j] * cos;\n            }\n            result[t] = scale * sum;\n        }\n        for (int i = 0; i < data.length; i++) {\n            data[i] = result[i];\n        }\n    }", "code_tokens": ["public", "static", "void", "Backward", "(", "double", "[", "]", "data", ")", "{", "double", "[", "]", "result", "=", "new", "double", "[", "data", ".", "length", "]", ";", "double", "sum", ";", "double", "scale", "=", "Math", ".", "sqrt", "(", "2.0", "/", "data", ".", "length", ")", ";", "for", "(", "int", "t", "=", "0", ";", "t", "<", "data", ".", "length", ";", "t", "++", ")", "{", "sum", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "data", ".", "length", ";", "j", "++", ")", "{", "double", "cos", "=", "Math", ".", "cos", "(", "(", "(", "2", "*", "t", "+", "1", ")", "*", "j", "*", "Math", ".", "PI", ")", "/", "(", "2", "*", "data", ".", "length", ")", ")", ";", "sum", "+=", "alpha", "(", "j", ")", "*", "data", "[", "j", "]", "*", "cos", ";", "}", "result", "[", "t", "]", "=", "scale", "*", "sum", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "data", ".", "length", ";", "i", "++", ")", "{", "data", "[", "i", "]", "=", "result", "[", "i", "]", ";", "}", "}"], "docstring": "1-D Backward Discrete Cosine Transform.\n\n@param data Data.", "docstring_tokens": ["1", "-", "D", "Backward", "Discrete", "Cosine", "Transform", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/transform/DiscreteCosineTransform.java#L101-L117", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/effect/LevelsLinear.java", "func_name": "LevelsLinear.setInRGB", "original_string": "public void setInRGB(IntRange inRGB) {\r\n        this.inRed = inRGB;\r\n        this.inGreen = inRGB;\r\n        this.inBlue = inRGB;\r\n\r\n        CalculateMap(inRGB, outRed, mapRed);\r\n        CalculateMap(inRGB, outGreen, mapGreen);\r\n        CalculateMap(inRGB, outBlue, mapBlue);\r\n    }", "language": "java", "code": "public void setInRGB(IntRange inRGB) {\r\n        this.inRed = inRGB;\r\n        this.inGreen = inRGB;\r\n        this.inBlue = inRGB;\r\n\r\n        CalculateMap(inRGB, outRed, mapRed);\r\n        CalculateMap(inRGB, outGreen, mapGreen);\r\n        CalculateMap(inRGB, outBlue, mapBlue);\r\n    }", "code_tokens": ["public", "void", "setInRGB", "(", "IntRange", "inRGB", ")", "{", "this", ".", "inRed", "=", "inRGB", ";", "this", ".", "inGreen", "=", "inRGB", ";", "this", ".", "inBlue", "=", "inRGB", ";", "CalculateMap", "(", "inRGB", ",", "outRed", ",", "mapRed", ")", ";", "CalculateMap", "(", "inRGB", ",", "outGreen", ",", "mapGreen", ")", ";", "CalculateMap", "(", "inRGB", ",", "outBlue", ",", "mapBlue", ")", ";", "}"], "docstring": "Set RGB input range.\n\n@param inRGB Range.", "docstring_tokens": ["Set", "RGB", "input", "range", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/effect/LevelsLinear.java#L222-L230", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/effect/LevelsLinear.java", "func_name": "LevelsLinear.setOutRGB", "original_string": "public void setOutRGB(IntRange outRGB) {\r\n        this.outRed = outRGB;\r\n        this.outGreen = outRGB;\r\n        this.outBlue = outRGB;\r\n\r\n        CalculateMap(inRed, outRGB, mapRed);\r\n        CalculateMap(inGreen, outRGB, mapGreen);\r\n        CalculateMap(inBlue, outRGB, mapBlue);\r\n    }", "language": "java", "code": "public void setOutRGB(IntRange outRGB) {\r\n        this.outRed = outRGB;\r\n        this.outGreen = outRGB;\r\n        this.outBlue = outRGB;\r\n\r\n        CalculateMap(inRed, outRGB, mapRed);\r\n        CalculateMap(inGreen, outRGB, mapGreen);\r\n        CalculateMap(inBlue, outRGB, mapBlue);\r\n    }", "code_tokens": ["public", "void", "setOutRGB", "(", "IntRange", "outRGB", ")", "{", "this", ".", "outRed", "=", "outRGB", ";", "this", ".", "outGreen", "=", "outRGB", ";", "this", ".", "outBlue", "=", "outRGB", ";", "CalculateMap", "(", "inRed", ",", "outRGB", ",", "mapRed", ")", ";", "CalculateMap", "(", "inGreen", ",", "outRGB", ",", "mapGreen", ")", ";", "CalculateMap", "(", "inBlue", ",", "outRGB", ",", "mapBlue", ")", ";", "}"], "docstring": "Set RGB output range.\n\n@param outRGB Range.", "docstring_tokens": ["Set", "RGB", "output", "range", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/effect/LevelsLinear.java#L237-L245", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/effect/LevelsLinear.java", "func_name": "LevelsLinear.CalculateMap", "original_string": "private void CalculateMap(IntRange inRange, IntRange outRange, int[] map) {\r\n        double k = 0, b = 0;\r\n\r\n        if (inRange.getMax() != inRange.getMin()) {\r\n            k = (double) (outRange.getMax() - outRange.getMin()) / (double) (inRange.getMax() - inRange.getMin());\r\n            b = (double) (outRange.getMin()) - k * inRange.getMin();\r\n        }\r\n\r\n        for (int i = 0; i < 256; i++) {\r\n            int v = (int) i;\r\n\r\n            if (v >= inRange.getMax())\r\n                v = outRange.getMax();\r\n            else if (v <= inRange.getMin())\r\n                v = outRange.getMin();\r\n            else\r\n                v = (int) (k * v + b);\r\n\r\n            map[i] = v;\r\n        }\r\n    }", "language": "java", "code": "private void CalculateMap(IntRange inRange, IntRange outRange, int[] map) {\r\n        double k = 0, b = 0;\r\n\r\n        if (inRange.getMax() != inRange.getMin()) {\r\n            k = (double) (outRange.getMax() - outRange.getMin()) / (double) (inRange.getMax() - inRange.getMin());\r\n            b = (double) (outRange.getMin()) - k * inRange.getMin();\r\n        }\r\n\r\n        for (int i = 0; i < 256; i++) {\r\n            int v = (int) i;\r\n\r\n            if (v >= inRange.getMax())\r\n                v = outRange.getMax();\r\n            else if (v <= inRange.getMin())\r\n                v = outRange.getMin();\r\n            else\r\n                v = (int) (k * v + b);\r\n\r\n            map[i] = v;\r\n        }\r\n    }", "code_tokens": ["private", "void", "CalculateMap", "(", "IntRange", "inRange", ",", "IntRange", "outRange", ",", "int", "[", "]", "map", ")", "{", "double", "k", "=", "0", ",", "b", "=", "0", ";", "if", "(", "inRange", ".", "getMax", "(", ")", "!=", "inRange", ".", "getMin", "(", ")", ")", "{", "k", "=", "(", "double", ")", "(", "outRange", ".", "getMax", "(", ")", "-", "outRange", ".", "getMin", "(", ")", ")", "/", "(", "double", ")", "(", "inRange", ".", "getMax", "(", ")", "-", "inRange", ".", "getMin", "(", ")", ")", ";", "b", "=", "(", "double", ")", "(", "outRange", ".", "getMin", "(", ")", ")", "-", "k", "*", "inRange", ".", "getMin", "(", ")", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "256", ";", "i", "++", ")", "{", "int", "v", "=", "(", "int", ")", "i", ";", "if", "(", "v", ">=", "inRange", ".", "getMax", "(", ")", ")", "v", "=", "outRange", ".", "getMax", "(", ")", ";", "else", "if", "(", "v", "<=", "inRange", ".", "getMin", "(", ")", ")", "v", "=", "outRange", ".", "getMin", "(", ")", ";", "else", "v", "=", "(", "int", ")", "(", "k", "*", "v", "+", "b", ")", ";", "map", "[", "i", "]", "=", "v", ";", "}", "}"], "docstring": "Calculate conversion map.\n\n@param inRange  Input range.\n@param outRange Output range.\n@param map      Conversion map.", "docstring_tokens": ["Calculate", "conversion", "map", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/effect/LevelsLinear.java#L285-L305", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/tools/ImageStatistics.java", "func_name": "ImageStatistics.Maximum", "original_string": "public static int Maximum(ImageSource fastBitmap, int startX, int startY, int width, int height) {\r\n        int max = 0;\r\n\r\n        if (fastBitmap.isGrayscale()) {\r\n            for (int i = startX; i < height; i++) {\r\n                for (int j = startY; j < width; j++) {\r\n                    int gray = fastBitmap.getRGB(j, i);\r\n                    if (gray > max) {\r\n                        max = gray;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (int i = startX; i < height; i++) {\r\n                for (int j = startY; j < width; j++) {\r\n                    int gray = fastBitmap.getG(j, i);\r\n                    if (gray > max) {\r\n                        max = gray;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return max;\r\n    }", "language": "java", "code": "public static int Maximum(ImageSource fastBitmap, int startX, int startY, int width, int height) {\r\n        int max = 0;\r\n\r\n        if (fastBitmap.isGrayscale()) {\r\n            for (int i = startX; i < height; i++) {\r\n                for (int j = startY; j < width; j++) {\r\n                    int gray = fastBitmap.getRGB(j, i);\r\n                    if (gray > max) {\r\n                        max = gray;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (int i = startX; i < height; i++) {\r\n                for (int j = startY; j < width; j++) {\r\n                    int gray = fastBitmap.getG(j, i);\r\n                    if (gray > max) {\r\n                        max = gray;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return max;\r\n    }", "code_tokens": ["public", "static", "int", "Maximum", "(", "ImageSource", "fastBitmap", ",", "int", "startX", ",", "int", "startY", ",", "int", "width", ",", "int", "height", ")", "{", "int", "max", "=", "0", ";", "if", "(", "fastBitmap", ".", "isGrayscale", "(", ")", ")", "{", "for", "(", "int", "i", "=", "startX", ";", "i", "<", "height", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "startY", ";", "j", "<", "width", ";", "j", "++", ")", "{", "int", "gray", "=", "fastBitmap", ".", "getRGB", "(", "j", ",", "i", ")", ";", "if", "(", "gray", ">", "max", ")", "{", "max", "=", "gray", ";", "}", "}", "}", "}", "else", "{", "for", "(", "int", "i", "=", "startX", ";", "i", "<", "height", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "startY", ";", "j", "<", "width", ";", "j", "++", ")", "{", "int", "gray", "=", "fastBitmap", ".", "getG", "(", "j", ",", "i", ")", ";", "if", "(", "gray", ">", "max", ")", "{", "max", "=", "gray", ";", "}", "}", "}", "}", "return", "max", ";", "}"], "docstring": "Get maximum gray value in the image.\n\n@param fastBitmap Image to be processed.\n@param startX     Initial X axis coordinate.\n@param startY     Initial Y axis coordinate.\n@param width      Width.\n@param height     Height.\n@return Maximum gray.", "docstring_tokens": ["Get", "maximum", "gray", "value", "in", "the", "image", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/tools/ImageStatistics.java#L263-L287", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/tools/ImageStatistics.java", "func_name": "ImageStatistics.Minimum", "original_string": "public static int Minimum(ImageSource fastBitmap, int startX, int startY, int width, int height) {\r\n        int min = 255;\r\n        if (fastBitmap.isGrayscale()) {\r\n            for (int i = startX; i < height; i++) {\r\n                for (int j = startY; j < width; j++) {\r\n                    int gray = fastBitmap.getRGB(j, i);\r\n                    if (gray < min) {\r\n                        min = gray;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (int i = startX; i < height; i++) {\r\n                for (int j = startY; j < width; j++) {\r\n                    int gray = fastBitmap.getG(j, i);\r\n                    if (gray < min) {\r\n                        min = gray;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return min;\r\n    }", "language": "java", "code": "public static int Minimum(ImageSource fastBitmap, int startX, int startY, int width, int height) {\r\n        int min = 255;\r\n        if (fastBitmap.isGrayscale()) {\r\n            for (int i = startX; i < height; i++) {\r\n                for (int j = startY; j < width; j++) {\r\n                    int gray = fastBitmap.getRGB(j, i);\r\n                    if (gray < min) {\r\n                        min = gray;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (int i = startX; i < height; i++) {\r\n                for (int j = startY; j < width; j++) {\r\n                    int gray = fastBitmap.getG(j, i);\r\n                    if (gray < min) {\r\n                        min = gray;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return min;\r\n    }", "code_tokens": ["public", "static", "int", "Minimum", "(", "ImageSource", "fastBitmap", ",", "int", "startX", ",", "int", "startY", ",", "int", "width", ",", "int", "height", ")", "{", "int", "min", "=", "255", ";", "if", "(", "fastBitmap", ".", "isGrayscale", "(", ")", ")", "{", "for", "(", "int", "i", "=", "startX", ";", "i", "<", "height", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "startY", ";", "j", "<", "width", ";", "j", "++", ")", "{", "int", "gray", "=", "fastBitmap", ".", "getRGB", "(", "j", ",", "i", ")", ";", "if", "(", "gray", "<", "min", ")", "{", "min", "=", "gray", ";", "}", "}", "}", "}", "else", "{", "for", "(", "int", "i", "=", "startX", ";", "i", "<", "height", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "startY", ";", "j", "<", "width", ";", "j", "++", ")", "{", "int", "gray", "=", "fastBitmap", ".", "getG", "(", "j", ",", "i", ")", ";", "if", "(", "gray", "<", "min", ")", "{", "min", "=", "gray", ";", "}", "}", "}", "}", "return", "min", ";", "}"], "docstring": "Get minimum gray value in the image.\n\n@param fastBitmap Image to be processed.\n@param startX     Initial X axis coordinate.\n@param startY     Initial Y axis coordinate.\n@param width      Width.\n@param height     Height.\n@return Minimum gray.", "docstring_tokens": ["Get", "minimum", "gray", "value", "in", "the", "image", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/tools/ImageStatistics.java#L309-L331", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.Bhattacharyya", "original_string": "public static double Bhattacharyya(double[] histogram1, double[] histogram2) {\n        int bins = histogram1.length; // histogram bins\n        double b = 0; // Bhattacharyya's coefficient\n\n        for (int i = 0; i < bins; i++)\n            b += Math.sqrt(histogram1[i]) * Math.sqrt(histogram2[i]);\n\n        // Bhattacharyya distance between the two distributions\n        return Math.sqrt(1.0 - b);\n    }", "language": "java", "code": "public static double Bhattacharyya(double[] histogram1, double[] histogram2) {\n        int bins = histogram1.length; // histogram bins\n        double b = 0; // Bhattacharyya's coefficient\n\n        for (int i = 0; i < bins; i++)\n            b += Math.sqrt(histogram1[i]) * Math.sqrt(histogram2[i]);\n\n        // Bhattacharyya distance between the two distributions\n        return Math.sqrt(1.0 - b);\n    }", "code_tokens": ["public", "static", "double", "Bhattacharyya", "(", "double", "[", "]", "histogram1", ",", "double", "[", "]", "histogram2", ")", "{", "int", "bins", "=", "histogram1", ".", "length", ";", "// histogram bins", "double", "b", "=", "0", ";", "// Bhattacharyya's coefficient", "for", "(", "int", "i", "=", "0", ";", "i", "<", "bins", ";", "i", "++", ")", "b", "+=", "Math", ".", "sqrt", "(", "histogram1", "[", "i", "]", ")", "*", "Math", ".", "sqrt", "(", "histogram2", "[", "i", "]", ")", ";", "// Bhattacharyya distance between the two distributions", "return", "Math", ".", "sqrt", "(", "1.0", "-", "b", ")", ";", "}"], "docstring": "Bhattacharyya distance between two normalized histograms.\n\n@param histogram1 Normalized histogram.\n@param histogram2 Normalized histogram.\n@return The Bhattacharyya distance between the two histograms.", "docstring_tokens": ["Bhattacharyya", "distance", "between", "two", "normalized", "histograms", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L68-L77", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.ChiSquare", "original_string": "public static double ChiSquare(double[] histogram1, double[] histogram2) {\n        double r = 0;\n        for (int i = 0; i < histogram1.length; i++) {\n            double t = histogram1[i] + histogram2[i];\n            if (t != 0)\n                r += Math.pow(histogram1[i] - histogram2[i], 2) / t;\n        }\n\n        return 0.5 * r;\n    }", "language": "java", "code": "public static double ChiSquare(double[] histogram1, double[] histogram2) {\n        double r = 0;\n        for (int i = 0; i < histogram1.length; i++) {\n            double t = histogram1[i] + histogram2[i];\n            if (t != 0)\n                r += Math.pow(histogram1[i] - histogram2[i], 2) / t;\n        }\n\n        return 0.5 * r;\n    }", "code_tokens": ["public", "static", "double", "ChiSquare", "(", "double", "[", "]", "histogram1", ",", "double", "[", "]", "histogram2", ")", "{", "double", "r", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "histogram1", ".", "length", ";", "i", "++", ")", "{", "double", "t", "=", "histogram1", "[", "i", "]", "+", "histogram2", "[", "i", "]", ";", "if", "(", "t", "!=", "0", ")", "r", "+=", "Math", ".", "pow", "(", "histogram1", "[", "i", "]", "-", "histogram2", "[", "i", "]", ",", "2", ")", "/", "t", ";", "}", "return", "0.5", "*", "r", ";", "}"], "docstring": "Gets the Chi Square distance between two normalized histograms.\n\n@param histogram1 Histogram.\n@param histogram2 Histogram.\n@return The Chi Square distance between x and y.", "docstring_tokens": ["Gets", "the", "Chi", "Square", "distance", "between", "two", "normalized", "histograms", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L265-L274", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.Correlation", "original_string": "public static double Correlation(double[] p, double[] q) {\n\n        double x = 0;\n        double y = 0;\n\n        for (int i = 0; i < p.length; i++) {\n            x += -p[i];\n            y += -q[i];\n        }\n\n        x /= p.length;\n        y /= q.length;\n\n        double num = 0;\n        double den1 = 0;\n        double den2 = 0;\n        for (int i = 0; i < p.length; i++) {\n            num += (p[i] + x) * (q[i] + y);\n\n            den1 += Math.abs(Math.pow(p[i] + x, 2));\n            den2 += Math.abs(Math.pow(q[i] + x, 2));\n        }\n\n        return 1 - (num / (Math.sqrt(den1) * Math.sqrt(den2)));\n\n    }", "language": "java", "code": "public static double Correlation(double[] p, double[] q) {\n\n        double x = 0;\n        double y = 0;\n\n        for (int i = 0; i < p.length; i++) {\n            x += -p[i];\n            y += -q[i];\n        }\n\n        x /= p.length;\n        y /= q.length;\n\n        double num = 0;\n        double den1 = 0;\n        double den2 = 0;\n        for (int i = 0; i < p.length; i++) {\n            num += (p[i] + x) * (q[i] + y);\n\n            den1 += Math.abs(Math.pow(p[i] + x, 2));\n            den2 += Math.abs(Math.pow(q[i] + x, 2));\n        }\n\n        return 1 - (num / (Math.sqrt(den1) * Math.sqrt(den2)));\n\n    }", "code_tokens": ["public", "static", "double", "Correlation", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "x", "=", "0", ";", "double", "y", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "x", "+=", "-", "p", "[", "i", "]", ";", "y", "+=", "-", "q", "[", "i", "]", ";", "}", "x", "/=", "p", ".", "length", ";", "y", "/=", "q", ".", "length", ";", "double", "num", "=", "0", ";", "double", "den1", "=", "0", ";", "double", "den2", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "num", "+=", "(", "p", "[", "i", "]", "+", "x", ")", "*", "(", "q", "[", "i", "]", "+", "y", ")", ";", "den1", "+=", "Math", ".", "abs", "(", "Math", ".", "pow", "(", "p", "[", "i", "]", "+", "x", ",", "2", ")", ")", ";", "den2", "+=", "Math", ".", "abs", "(", "Math", ".", "pow", "(", "q", "[", "i", "]", "+", "x", ",", "2", ")", ")", ";", "}", "return", "1", "-", "(", "num", "/", "(", "Math", ".", "sqrt", "(", "den1", ")", "*", "Math", ".", "sqrt", "(", "den2", ")", ")", ")", ";", "}"], "docstring": "Gets the Correlation distance between two points.\n\n@param p A point in space.\n@param q A point in space.\n@return The Correlation distance between x and y.", "docstring_tokens": ["Gets", "the", "Correlation", "distance", "between", "two", "points", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L283-L308", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.Hamming", "original_string": "public static int Hamming(String first, String second) {\n\n        if (first.length() != second.length())\n            throw new IllegalArgumentException(\"The size of string must be the same.\");\n\n        int diff = 0;\n        for (int i = 0; i < first.length(); i++)\n            if (first.charAt(i) != second.charAt(i))\n                diff++;\n        return diff;\n    }", "language": "java", "code": "public static int Hamming(String first, String second) {\n\n        if (first.length() != second.length())\n            throw new IllegalArgumentException(\"The size of string must be the same.\");\n\n        int diff = 0;\n        for (int i = 0; i < first.length(); i++)\n            if (first.charAt(i) != second.charAt(i))\n                diff++;\n        return diff;\n    }", "code_tokens": ["public", "static", "int", "Hamming", "(", "String", "first", ",", "String", "second", ")", "{", "if", "(", "first", ".", "length", "(", ")", "!=", "second", ".", "length", "(", ")", ")", "throw", "new", "IllegalArgumentException", "(", "\"The size of string must be the same.\"", ")", ";", "int", "diff", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "first", ".", "length", "(", ")", ";", "i", "++", ")", "if", "(", "first", ".", "charAt", "(", "i", ")", "!=", "second", ".", "charAt", "(", "i", ")", ")", "diff", "++", ";", "return", "diff", ";", "}"], "docstring": "Gets the Hamming distance between two strings.\n\n@param first  First string.\n@param second Second string.\n@return The Hamming distance between p and q.", "docstring_tokens": ["Gets", "the", "Hamming", "distance", "between", "two", "strings", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L412-L422", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.JaccardDistance", "original_string": "public static double JaccardDistance(double[] p, double[] q) {\n        double distance = 0;\n        int intersection = 0, union = 0;\n\n        for (int x = 0; x < p.length; x++) {\n            if ((p[x] != 0) || (q[x] != 0)) {\n                if (p[x] == q[x]) {\n                    intersection++;\n                }\n\n                union++;\n            }\n        }\n\n        if (union != 0)\n            distance = 1.0 - ((double) intersection / (double) union);\n        else\n            distance = 0;\n\n        return distance;\n    }", "language": "java", "code": "public static double JaccardDistance(double[] p, double[] q) {\n        double distance = 0;\n        int intersection = 0, union = 0;\n\n        for (int x = 0; x < p.length; x++) {\n            if ((p[x] != 0) || (q[x] != 0)) {\n                if (p[x] == q[x]) {\n                    intersection++;\n                }\n\n                union++;\n            }\n        }\n\n        if (union != 0)\n            distance = 1.0 - ((double) intersection / (double) union);\n        else\n            distance = 0;\n\n        return distance;\n    }", "code_tokens": ["public", "static", "double", "JaccardDistance", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "distance", "=", "0", ";", "int", "intersection", "=", "0", ",", "union", "=", "0", ";", "for", "(", "int", "x", "=", "0", ";", "x", "<", "p", ".", "length", ";", "x", "++", ")", "{", "if", "(", "(", "p", "[", "x", "]", "!=", "0", ")", "||", "(", "q", "[", "x", "]", "!=", "0", ")", ")", "{", "if", "(", "p", "[", "x", "]", "==", "q", "[", "x", "]", ")", "{", "intersection", "++", ";", "}", "union", "++", ";", "}", "}", "if", "(", "union", "!=", "0", ")", "distance", "=", "1.0", "-", "(", "(", "double", ")", "intersection", "/", "(", "double", ")", "union", ")", ";", "else", "distance", "=", "0", ";", "return", "distance", ";", "}"], "docstring": "Gets the Jaccard distance between two points.\n\n@param p A point in space.\n@param q A point in space.\n@return The Jaccard distance between x and y.", "docstring_tokens": ["Gets", "the", "Jaccard", "distance", "between", "two", "points", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L431-L451", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.JensenShannonDivergence", "original_string": "public static double JensenShannonDivergence(double[] p, double[] q) {\n        double[] m = new double[p.length];\n        for (int i = 0; i < m.length; i++) {\n            m[i] = (p[i] + q[i]) / 2;\n        }\n\n        return (KullbackLeiblerDivergence(p, m) + KullbackLeiblerDivergence(q, m)) / 2;\n    }", "language": "java", "code": "public static double JensenShannonDivergence(double[] p, double[] q) {\n        double[] m = new double[p.length];\n        for (int i = 0; i < m.length; i++) {\n            m[i] = (p[i] + q[i]) / 2;\n        }\n\n        return (KullbackLeiblerDivergence(p, m) + KullbackLeiblerDivergence(q, m)) / 2;\n    }", "code_tokens": ["public", "static", "double", "JensenShannonDivergence", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "[", "]", "m", "=", "new", "double", "[", "p", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ".", "length", ";", "i", "++", ")", "{", "m", "[", "i", "]", "=", "(", "p", "[", "i", "]", "+", "q", "[", "i", "]", ")", "/", "2", ";", "}", "return", "(", "KullbackLeiblerDivergence", "(", "p", ",", "m", ")", "+", "KullbackLeiblerDivergence", "(", "q", ",", "m", ")", ")", "/", "2", ";", "}"], "docstring": "Gets the Jensen Shannon divergence.\n\n@param p U vector.\n@param q V vector.\n@return The Jensen Shannon divergence between u and v.", "docstring_tokens": ["Gets", "the", "Jensen", "Shannon", "divergence", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L509-L516", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.KumarJohnsonDivergence", "original_string": "public static double KumarJohnsonDivergence(double[] p, double[] q) {\n        double r = 0;\n        for (int i = 0; i < p.length; i++) {\n            if (p[i] != 0 && q[i] != 0) {\n                r += Math.pow(p[i] * p[i] - q[i] * q[i], 2) / 2 * Math.pow(p[i] * q[i], 1.5);\n            }\n        }\n        return r;\n    }", "language": "java", "code": "public static double KumarJohnsonDivergence(double[] p, double[] q) {\n        double r = 0;\n        for (int i = 0; i < p.length; i++) {\n            if (p[i] != 0 && q[i] != 0) {\n                r += Math.pow(p[i] * p[i] - q[i] * q[i], 2) / 2 * Math.pow(p[i] * q[i], 1.5);\n            }\n        }\n        return r;\n    }", "code_tokens": ["public", "static", "double", "KumarJohnsonDivergence", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "r", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "if", "(", "p", "[", "i", "]", "!=", "0", "&&", "q", "[", "i", "]", "!=", "0", ")", "{", "r", "+=", "Math", ".", "pow", "(", "p", "[", "i", "]", "*", "p", "[", "i", "]", "-", "q", "[", "i", "]", "*", "q", "[", "i", "]", ",", "2", ")", "/", "2", "*", "Math", ".", "pow", "(", "p", "[", "i", "]", "*", "q", "[", "i", "]", ",", "1.5", ")", ";", "}", "}", "return", "r", ";", "}"], "docstring": "Gets the Kumar-Johnson divergence.\n\n@param p P vector.\n@param q Q vector.\n@return The Kumar-Johnson divergence between p and q.", "docstring_tokens": ["Gets", "the", "Kumar", "-", "Johnson", "divergence", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L543-L551", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.KullbackLeiblerDivergence", "original_string": "public static double KullbackLeiblerDivergence(double[] p, double[] q) {\n        boolean intersection = false;\n        double k = 0;\n\n        for (int i = 0; i < p.length; i++) {\n            if (p[i] != 0 && q[i] != 0) {\n                intersection = true;\n                k += p[i] * Math.log(p[i] / q[i]);\n            }\n        }\n\n        if (intersection)\n            return k;\n        else\n            return Double.POSITIVE_INFINITY;\n    }", "language": "java", "code": "public static double KullbackLeiblerDivergence(double[] p, double[] q) {\n        boolean intersection = false;\n        double k = 0;\n\n        for (int i = 0; i < p.length; i++) {\n            if (p[i] != 0 && q[i] != 0) {\n                intersection = true;\n                k += p[i] * Math.log(p[i] / q[i]);\n            }\n        }\n\n        if (intersection)\n            return k;\n        else\n            return Double.POSITIVE_INFINITY;\n    }", "code_tokens": ["public", "static", "double", "KullbackLeiblerDivergence", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "boolean", "intersection", "=", "false", ";", "double", "k", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "if", "(", "p", "[", "i", "]", "!=", "0", "&&", "q", "[", "i", "]", "!=", "0", ")", "{", "intersection", "=", "true", ";", "k", "+=", "p", "[", "i", "]", "*", "Math", ".", "log", "(", "p", "[", "i", "]", "/", "q", "[", "i", "]", ")", ";", "}", "}", "if", "(", "intersection", ")", "return", "k", ";", "else", "return", "Double", ".", "POSITIVE_INFINITY", ";", "}"], "docstring": "Gets the Kullback Leibler divergence.\n\n@param p P vector.\n@param q Q vector.\n@return The Kullback Leibler divergence between u and v.", "docstring_tokens": ["Gets", "the", "Kullback", "Leibler", "divergence", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L560-L575", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.SquaredEuclidean", "original_string": "public static double SquaredEuclidean(double[] x, double[] y) {\n        double d = 0.0, u;\n\n        for (int i = 0; i < x.length; i++) {\n            u = x[i] - y[i];\n            d += u * u;\n        }\n\n        return d;\n    }", "language": "java", "code": "public static double SquaredEuclidean(double[] x, double[] y) {\n        double d = 0.0, u;\n\n        for (int i = 0; i < x.length; i++) {\n            u = x[i] - y[i];\n            d += u * u;\n        }\n\n        return d;\n    }", "code_tokens": ["public", "static", "double", "SquaredEuclidean", "(", "double", "[", "]", "x", ",", "double", "[", "]", "y", ")", "{", "double", "d", "=", "0.0", ",", "u", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "x", ".", "length", ";", "i", "++", ")", "{", "u", "=", "x", "[", "i", "]", "-", "y", "[", "i", "]", ";", "d", "+=", "u", "*", "u", ";", "}", "return", "d", ";", "}"], "docstring": "Gets the Square Euclidean distance between two points.\n\n@param x A point in space.\n@param y A point in space.\n@return The Square Euclidean distance between x and y.", "docstring_tokens": ["Gets", "the", "Square", "Euclidean", "distance", "between", "two", "points", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L801-L810", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.SymmetricChiSquareDivergence", "original_string": "public static double SymmetricChiSquareDivergence(double[] p, double[] q) {\n        double r = 0;\n        for (int i = 0; i < p.length; i++) {\n            double den = p[i] * q[i];\n            if (den != 0) {\n                double p1 = p[i] - q[i];\n                double p2 = p[i] + q[i];\n                r += (p1 * p1 * p2) / den;\n            }\n        }\n\n        return r;\n    }", "language": "java", "code": "public static double SymmetricChiSquareDivergence(double[] p, double[] q) {\n        double r = 0;\n        for (int i = 0; i < p.length; i++) {\n            double den = p[i] * q[i];\n            if (den != 0) {\n                double p1 = p[i] - q[i];\n                double p2 = p[i] + q[i];\n                r += (p1 * p1 * p2) / den;\n            }\n        }\n\n        return r;\n    }", "code_tokens": ["public", "static", "double", "SymmetricChiSquareDivergence", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "r", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "double", "den", "=", "p", "[", "i", "]", "*", "q", "[", "i", "]", ";", "if", "(", "den", "!=", "0", ")", "{", "double", "p1", "=", "p", "[", "i", "]", "-", "q", "[", "i", "]", ";", "double", "p2", "=", "p", "[", "i", "]", "+", "q", "[", "i", "]", ";", "r", "+=", "(", "p1", "*", "p1", "*", "p2", ")", "/", "den", ";", "}", "}", "return", "r", ";", "}"], "docstring": "Gets the Symmetric Chi-square divergence.\n\n@param p P vector.\n@param q Q vector.\n@return The Symmetric chi-square divergence between p and q.", "docstring_tokens": ["Gets", "the", "Symmetric", "Chi", "-", "square", "divergence", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L851-L863", "partition": "train"}
{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/distance/Distance.java", "func_name": "Distance.SymmetricKullbackLeibler", "original_string": "public static double SymmetricKullbackLeibler(double[] p, double[] q) {\n        double dist = 0;\n        for (int i = 0; i < p.length; i++) {\n            dist += (p[i] - q[i]) * (Math.log(p[i]) - Math.log(q[i]));\n        }\n\n        return dist;\n    }", "language": "java", "code": "public static double SymmetricKullbackLeibler(double[] p, double[] q) {\n        double dist = 0;\n        for (int i = 0; i < p.length; i++) {\n            dist += (p[i] - q[i]) * (Math.log(p[i]) - Math.log(q[i]));\n        }\n\n        return dist;\n    }", "code_tokens": ["public", "static", "double", "SymmetricKullbackLeibler", "(", "double", "[", "]", "p", ",", "double", "[", "]", "q", ")", "{", "double", "dist", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "i", "++", ")", "{", "dist", "+=", "(", "p", "[", "i", "]", "-", "q", "[", "i", "]", ")", "*", "(", "Math", ".", "log", "(", "p", "[", "i", "]", ")", "-", "Math", ".", "log", "(", "q", "[", "i", "]", ")", ")", ";", "}", "return", "dist", ";", "}"], "docstring": "Gets the Symmetric Kullback-Leibler distance.\nThis metric is valid only for real and positive P and Q.\n\n@param p P vector.\n@param q Q vector.\n@return The Symmetric Kullback Leibler distance between p and q.", "docstring_tokens": ["Gets", "the", "Symmetric", "Kullback", "-", "Leibler", "distance", ".", "This", "metric", "is", "valid", "only", "for", "real", "and", "positive", "P", "and", "Q", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/distance/Distance.java#L873-L880", "partition": "train"}
